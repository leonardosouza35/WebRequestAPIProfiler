//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebRequestGetOrderStatusProfiler.OrderAPI {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://mts.geobridge.org/", ConfigurationName="OrderAPI.mtsSoap")]
    public interface mtsSoap {
        
        // CODEGEN: Generating message contract since message GetTypesOfPaymentRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://mts.geobridge.org/GetTypesOfPayment", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        WebRequestGetOrderStatusProfiler.OrderAPI.GetTypesOfPaymentResponse GetTypesOfPayment(WebRequestGetOrderStatusProfiler.OrderAPI.GetTypesOfPaymentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mts.geobridge.org/GetTypesOfPayment", ReplyAction="*")]
        System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetTypesOfPaymentResponse> GetTypesOfPaymentAsync(WebRequestGetOrderStatusProfiler.OrderAPI.GetTypesOfPaymentRequest request);
        
        // CODEGEN: Generating message contract since message GetErrorListRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://mts.geobridge.org/GetErrorList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        WebRequestGetOrderStatusProfiler.OrderAPI.GetErrorListResponse GetErrorList(WebRequestGetOrderStatusProfiler.OrderAPI.GetErrorListRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mts.geobridge.org/GetErrorList", ReplyAction="*")]
        System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetErrorListResponse> GetErrorListAsync(WebRequestGetOrderStatusProfiler.OrderAPI.GetErrorListRequest request);
        
        // CODEGEN: Generating message contract since message CreateNewOrderRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://mts.geobridge.org/CreateNewOrder", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        WebRequestGetOrderStatusProfiler.OrderAPI.CreateNewOrderResponse CreateNewOrder(WebRequestGetOrderStatusProfiler.OrderAPI.CreateNewOrderRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mts.geobridge.org/CreateNewOrder", ReplyAction="*")]
        System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.CreateNewOrderResponse> CreateNewOrderAsync(WebRequestGetOrderStatusProfiler.OrderAPI.CreateNewOrderRequest request);
        
        // CODEGEN: Generating message contract since message CreateNewPaymentRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://mts.geobridge.org/CreateNewPayment", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        WebRequestGetOrderStatusProfiler.OrderAPI.CreateNewPaymentResponse CreateNewPayment(WebRequestGetOrderStatusProfiler.OrderAPI.CreateNewPaymentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mts.geobridge.org/CreateNewPayment", ReplyAction="*")]
        System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.CreateNewPaymentResponse> CreateNewPaymentAsync(WebRequestGetOrderStatusProfiler.OrderAPI.CreateNewPaymentRequest request);
        
        // CODEGEN: Generating message contract since message GetRatesAndCostsRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://mts.geobridge.org/GetRatesAndCosts", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        WebRequestGetOrderStatusProfiler.OrderAPI.GetRatesAndCostsResponse GetRatesAndCosts(WebRequestGetOrderStatusProfiler.OrderAPI.GetRatesAndCostsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mts.geobridge.org/GetRatesAndCosts", ReplyAction="*")]
        System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetRatesAndCostsResponse> GetRatesAndCostsAsync(WebRequestGetOrderStatusProfiler.OrderAPI.GetRatesAndCostsRequest request);
        
        // CODEGEN: Generating message contract since message GetPaymentLocationsRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://mts.geobridge.org/GetPaymentLocations", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        WebRequestGetOrderStatusProfiler.OrderAPI.GetPaymentLocationsResponse GetPaymentLocations(WebRequestGetOrderStatusProfiler.OrderAPI.GetPaymentLocationsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mts.geobridge.org/GetPaymentLocations", ReplyAction="*")]
        System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetPaymentLocationsResponse> GetPaymentLocationsAsync(WebRequestGetOrderStatusProfiler.OrderAPI.GetPaymentLocationsRequest request);
        
        // CODEGEN: Generating message contract since message GetOrderDetailsRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://mts.geobridge.org/GetOrderDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        WebRequestGetOrderStatusProfiler.OrderAPI.GetOrderDetailsResponse GetOrderDetails(WebRequestGetOrderStatusProfiler.OrderAPI.GetOrderDetailsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mts.geobridge.org/GetOrderDetails", ReplyAction="*")]
        System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetOrderDetailsResponse> GetOrderDetailsAsync(WebRequestGetOrderStatusProfiler.OrderAPI.GetOrderDetailsRequest request);
        
        // CODEGEN: Generating message contract since message GetCancelationByCancelDateRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://mts.geobridge.org/GetCancelationByCancelDate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        WebRequestGetOrderStatusProfiler.OrderAPI.GetCancelationByCancelDateResponse GetCancelationByCancelDate(WebRequestGetOrderStatusProfiler.OrderAPI.GetCancelationByCancelDateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mts.geobridge.org/GetCancelationByCancelDate", ReplyAction="*")]
        System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetCancelationByCancelDateResponse> GetCancelationByCancelDateAsync(WebRequestGetOrderStatusProfiler.OrderAPI.GetCancelationByCancelDateRequest request);
        
        // CODEGEN: Generating message contract since message GetClientAccountChangesByDateRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://mts.geobridge.org/GetClientAccountChangesByDate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        WebRequestGetOrderStatusProfiler.OrderAPI.GetClientAccountChangesByDateResponse GetClientAccountChangesByDate(WebRequestGetOrderStatusProfiler.OrderAPI.GetClientAccountChangesByDateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mts.geobridge.org/GetClientAccountChangesByDate", ReplyAction="*")]
        System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetClientAccountChangesByDateResponse> GetClientAccountChangesByDateAsync(WebRequestGetOrderStatusProfiler.OrderAPI.GetClientAccountChangesByDateRequest request);
        
        // CODEGEN: Generating message contract since message GetCurrencyTypesOfPaymentRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://mts.geobridge.org/GetCurrencyTypesOfPayment", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        WebRequestGetOrderStatusProfiler.OrderAPI.GetCurrencyTypesOfPaymentResponse GetCurrencyTypesOfPayment(WebRequestGetOrderStatusProfiler.OrderAPI.GetCurrencyTypesOfPaymentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mts.geobridge.org/GetCurrencyTypesOfPayment", ReplyAction="*")]
        System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetCurrencyTypesOfPaymentResponse> GetCurrencyTypesOfPaymentAsync(WebRequestGetOrderStatusProfiler.OrderAPI.GetCurrencyTypesOfPaymentRequest request);
        
        // CODEGEN: Generating message contract since message UpdateOrderRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://mts.geobridge.org/UpdateOrder", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        WebRequestGetOrderStatusProfiler.OrderAPI.UpdateOrderResponse UpdateOrder(WebRequestGetOrderStatusProfiler.OrderAPI.UpdateOrderRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mts.geobridge.org/UpdateOrder", ReplyAction="*")]
        System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.UpdateOrderResponse> UpdateOrderAsync(WebRequestGetOrderStatusProfiler.OrderAPI.UpdateOrderRequest request);
        
        // CODEGEN: Generating message contract since message GetCurrenciesOfPaymentRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://mts.geobridge.org/GetCurrenciesOfPayment", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        WebRequestGetOrderStatusProfiler.OrderAPI.GetCurrenciesOfPaymentResponse GetCurrenciesOfPayment(WebRequestGetOrderStatusProfiler.OrderAPI.GetCurrenciesOfPaymentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mts.geobridge.org/GetCurrenciesOfPayment", ReplyAction="*")]
        System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetCurrenciesOfPaymentResponse> GetCurrenciesOfPaymentAsync(WebRequestGetOrderStatusProfiler.OrderAPI.GetCurrenciesOfPaymentRequest request);
        
        // CODEGEN: Generating message contract since message ValidateBillPaymentRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://mts.geobridge.org/ValidateBillPayment", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        WebRequestGetOrderStatusProfiler.OrderAPI.ValidateBillPaymentResponse ValidateBillPayment(WebRequestGetOrderStatusProfiler.OrderAPI.ValidateBillPaymentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mts.geobridge.org/ValidateBillPayment", ReplyAction="*")]
        System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.ValidateBillPaymentResponse> ValidateBillPaymentAsync(WebRequestGetOrderStatusProfiler.OrderAPI.ValidateBillPaymentRequest request);
        
        // CODEGEN: Generating message contract since message GetOrderStatusRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://mts.geobridge.org/GetOrderStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        WebRequestGetOrderStatusProfiler.OrderAPI.GetOrderStatusResponse GetOrderStatus(WebRequestGetOrderStatusProfiler.OrderAPI.GetOrderStatusRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mts.geobridge.org/GetOrderStatus", ReplyAction="*")]
        System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetOrderStatusResponse> GetOrderStatusAsync(WebRequestGetOrderStatusProfiler.OrderAPI.GetOrderStatusRequest request);
        
        // CODEGEN: Generating message contract since message GetPdfPaymentReceiptRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://mts.geobridge.org/GetPdfPaymentReceipt", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        WebRequestGetOrderStatusProfiler.OrderAPI.GetPdfPaymentReceiptResponse GetPdfPaymentReceipt(WebRequestGetOrderStatusProfiler.OrderAPI.GetPdfPaymentReceiptRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mts.geobridge.org/GetPdfPaymentReceipt", ReplyAction="*")]
        System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetPdfPaymentReceiptResponse> GetPdfPaymentReceiptAsync(WebRequestGetOrderStatusProfiler.OrderAPI.GetPdfPaymentReceiptRequest request);
        
        // CODEGEN: Generating message contract since message GetActiveCountriesRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://mts.geobridge.org/GetActiveCountries", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        WebRequestGetOrderStatusProfiler.OrderAPI.GetActiveCountriesResponse GetActiveCountries(WebRequestGetOrderStatusProfiler.OrderAPI.GetActiveCountriesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mts.geobridge.org/GetActiveCountries", ReplyAction="*")]
        System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetActiveCountriesResponse> GetActiveCountriesAsync(WebRequestGetOrderStatusProfiler.OrderAPI.GetActiveCountriesRequest request);
        
        // CODEGEN: Generating message contract since message GetPartnerBalanceRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://mts.geobridge.org/GetPartnerBalance", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        WebRequestGetOrderStatusProfiler.OrderAPI.GetPartnerBalanceResponse GetPartnerBalance(WebRequestGetOrderStatusProfiler.OrderAPI.GetPartnerBalanceRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mts.geobridge.org/GetPartnerBalance", ReplyAction="*")]
        System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetPartnerBalanceResponse> GetPartnerBalanceAsync(WebRequestGetOrderStatusProfiler.OrderAPI.GetPartnerBalanceRequest request);
        
        // CODEGEN: Generating message contract since message GetPaymentsByDateRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://mts.geobridge.org/GetPaymentsByDate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        WebRequestGetOrderStatusProfiler.OrderAPI.GetPaymentsByDateResponse GetPaymentsByDate(WebRequestGetOrderStatusProfiler.OrderAPI.GetPaymentsByDateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mts.geobridge.org/GetPaymentsByDate", ReplyAction="*")]
        System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetPaymentsByDateResponse> GetPaymentsByDateAsync(WebRequestGetOrderStatusProfiler.OrderAPI.GetPaymentsByDateRequest request);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://mts.geobridge.org/")]
    public partial class AuthHeader : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string userNameField;
        
        private string passwordField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
                this.RaisePropertyChanged("UserName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
                this.RaisePropertyChanged("Password");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
                this.RaisePropertyChanged("AnyAttr");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetTypesOfPayment", WrapperNamespace="http://mts.geobridge.org/", IsWrapped=true)]
    public partial class GetTypesOfPaymentRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://mts.geobridge.org/")]
        public WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=0)]
        public string AgentID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=1)]
        public string PartnerID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=2)]
        public string SenderCountry;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=3)]
        public string RecipientCountry;
        
        public GetTypesOfPaymentRequest() {
        }
        
        public GetTypesOfPaymentRequest(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, string AgentID, string PartnerID, string SenderCountry, string RecipientCountry) {
            this.AuthHeader = AuthHeader;
            this.AgentID = AgentID;
            this.PartnerID = PartnerID;
            this.SenderCountry = SenderCountry;
            this.RecipientCountry = RecipientCountry;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetTypesOfPaymentResponse", WrapperNamespace="http://mts.geobridge.org/", IsWrapped=true)]
    public partial class GetTypesOfPaymentResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=0)]
        public System.Xml.XmlNode GetTypesOfPaymentResult;
        
        public GetTypesOfPaymentResponse() {
        }
        
        public GetTypesOfPaymentResponse(System.Xml.XmlNode GetTypesOfPaymentResult) {
            this.GetTypesOfPaymentResult = GetTypesOfPaymentResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetErrorList", WrapperNamespace="http://mts.geobridge.org/", IsWrapped=true)]
    public partial class GetErrorListRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://mts.geobridge.org/")]
        public WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader;
        
        public GetErrorListRequest() {
        }
        
        public GetErrorListRequest(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader) {
            this.AuthHeader = AuthHeader;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetErrorListResponse", WrapperNamespace="http://mts.geobridge.org/", IsWrapped=true)]
    public partial class GetErrorListResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=0)]
        public System.Xml.XmlNode GetErrorListResult;
        
        public GetErrorListResponse() {
        }
        
        public GetErrorListResponse(System.Xml.XmlNode GetErrorListResult) {
            this.GetErrorListResult = GetErrorListResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateNewOrder", WrapperNamespace="http://mts.geobridge.org/", IsWrapped=true)]
    public partial class CreateNewOrderRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://mts.geobridge.org/")]
        public WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=0)]
        public string AgentID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=1)]
        public string PartnerID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=2)]
        public string AgentOrderReference;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=3)]
        public string OrderCreationTime;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=4)]
        public string SenderUID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=5)]
        public string SenderLastName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=6)]
        public string SenderFirstName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=7)]
        public string SenderCompanyName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=8)]
        public string SenderAddress;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=9)]
        public string SenderCity;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=10)]
        public string SenderState;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=11)]
        public string SenderZip;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=12)]
        public string SenderCountry;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=13)]
        public string SenderPhone1;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=14)]
        public string SenderPhone2;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=15)]
        public string SenderEmail;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=16)]
        public string SenderDateOfBirth;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=17)]
        public string SenderDocument1Type;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=18)]
        public string SenderDocument1Issue;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=19)]
        public string SenderDocument1Number;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=20)]
        public string SenderDocument2Type;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=21)]
        public string SenderDocument2Issue;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=22)]
        public string SenderDocument2Number;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=23)]
        public string SenderGender;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=24)]
        public string SenderNationality;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=25)]
        public string RecipientUID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=26)]
        public string RecipientLastName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=27)]
        public string RecipientFirstName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=28)]
        public string RecipientCompany;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=29)]
        public string RecipientAddress1;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=30)]
        public string RecipientCity;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=31)]
        public string RecipientState;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=32)]
        public string RecipientZip;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=33)]
        public string RecipientCountry;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=34)]
        public string RecipientPhone1;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=35)]
        public string RecipientPhone2;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=36)]
        public string RecipientEmail;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=37)]
        public string RecipientDocument1Type;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=38)]
        public string RecipientDocument1Issuer;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=39)]
        public string RecipientDocument1Number;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=40)]
        public string RecipientDocument2Type;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=41)]
        public string RecipientDocument2Issuer;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=42)]
        public string RecipientDocument2Number;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=43)]
        public string RecipientBankName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=44)]
        public string RecipientBankRouting;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=45)]
        public string RecipientBranchID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=46)]
        public string RecipientBankAccountNo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=47)]
        public string RecipientBankAccountID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=48)]
        public string RecipientBankAddress;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=49)]
        public string RecipientTIN;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=50)]
        public string RecipientBankAccoutType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=51)]
        public string NetAmountSent;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=52)]
        public string TotalFeeSender;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=53)]
        public string TotalCollectedFromSender;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=54)]
        public string ExchangeRateSender;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=55)]
        public string CurrencySent;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=56)]
        public string ExchangeRateAgent;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=57)]
        public string TotalFeeAgent;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=58)]
        public string TotalDueFromAgent;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=59)]
        public string AmountReceived;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=60)]
        public string TotalRecipiententFee;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=61)]
        public string TotalPaidToRecipient;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=62)]
        public string CurrencyOfPayment;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=63)]
        public string CurrencyOfPaymentID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=64)]
        public string ChallengeQuestion;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=65)]
        public string ChallengeAnswer;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=66)]
        public string PayLocationID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=67)]
        public string PaymentLocation;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=68)]
        public string MessageToRecipient;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=69)]
        public string PaymentInstructions;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=70)]
        public string TypeOfPaymentText;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=71)]
        public string TypeOfPaymentID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=72)]
        public string OrderClaimCode;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=73)]
        public string Custom1;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=74)]
        public string Custom2;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=75)]
        public string Custom3;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=76)]
        public string Custom4;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=77)]
        public string SenderOccupation;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=78)]
        public string RelationshipToSender;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=79)]
        public string PurposeOfOrder;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=80)]
        public string OrderFundSource;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=81)]
        public string OrderCardSurcharge;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=82)]
        public string AdditionalChargesDiscounts;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=83)]
        public string ChargesDiscountsDescription;
        
        public CreateNewOrderRequest() {
        }
        
        public CreateNewOrderRequest(
                    WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, 
                    string AgentID, 
                    string PartnerID, 
                    string AgentOrderReference, 
                    string OrderCreationTime, 
                    string SenderUID, 
                    string SenderLastName, 
                    string SenderFirstName, 
                    string SenderCompanyName, 
                    string SenderAddress, 
                    string SenderCity, 
                    string SenderState, 
                    string SenderZip, 
                    string SenderCountry, 
                    string SenderPhone1, 
                    string SenderPhone2, 
                    string SenderEmail, 
                    string SenderDateOfBirth, 
                    string SenderDocument1Type, 
                    string SenderDocument1Issue, 
                    string SenderDocument1Number, 
                    string SenderDocument2Type, 
                    string SenderDocument2Issue, 
                    string SenderDocument2Number, 
                    string SenderGender, 
                    string SenderNationality, 
                    string RecipientUID, 
                    string RecipientLastName, 
                    string RecipientFirstName, 
                    string RecipientCompany, 
                    string RecipientAddress1, 
                    string RecipientCity, 
                    string RecipientState, 
                    string RecipientZip, 
                    string RecipientCountry, 
                    string RecipientPhone1, 
                    string RecipientPhone2, 
                    string RecipientEmail, 
                    string RecipientDocument1Type, 
                    string RecipientDocument1Issuer, 
                    string RecipientDocument1Number, 
                    string RecipientDocument2Type, 
                    string RecipientDocument2Issuer, 
                    string RecipientDocument2Number, 
                    string RecipientBankName, 
                    string RecipientBankRouting, 
                    string RecipientBranchID, 
                    string RecipientBankAccountNo, 
                    string RecipientBankAccountID, 
                    string RecipientBankAddress, 
                    string RecipientTIN, 
                    string RecipientBankAccoutType, 
                    string NetAmountSent, 
                    string TotalFeeSender, 
                    string TotalCollectedFromSender, 
                    string ExchangeRateSender, 
                    string CurrencySent, 
                    string ExchangeRateAgent, 
                    string TotalFeeAgent, 
                    string TotalDueFromAgent, 
                    string AmountReceived, 
                    string TotalRecipiententFee, 
                    string TotalPaidToRecipient, 
                    string CurrencyOfPayment, 
                    string CurrencyOfPaymentID, 
                    string ChallengeQuestion, 
                    string ChallengeAnswer, 
                    string PayLocationID, 
                    string PaymentLocation, 
                    string MessageToRecipient, 
                    string PaymentInstructions, 
                    string TypeOfPaymentText, 
                    string TypeOfPaymentID, 
                    string OrderClaimCode, 
                    string Custom1, 
                    string Custom2, 
                    string Custom3, 
                    string Custom4, 
                    string SenderOccupation, 
                    string RelationshipToSender, 
                    string PurposeOfOrder, 
                    string OrderFundSource, 
                    string OrderCardSurcharge, 
                    string AdditionalChargesDiscounts, 
                    string ChargesDiscountsDescription) {
            this.AuthHeader = AuthHeader;
            this.AgentID = AgentID;
            this.PartnerID = PartnerID;
            this.AgentOrderReference = AgentOrderReference;
            this.OrderCreationTime = OrderCreationTime;
            this.SenderUID = SenderUID;
            this.SenderLastName = SenderLastName;
            this.SenderFirstName = SenderFirstName;
            this.SenderCompanyName = SenderCompanyName;
            this.SenderAddress = SenderAddress;
            this.SenderCity = SenderCity;
            this.SenderState = SenderState;
            this.SenderZip = SenderZip;
            this.SenderCountry = SenderCountry;
            this.SenderPhone1 = SenderPhone1;
            this.SenderPhone2 = SenderPhone2;
            this.SenderEmail = SenderEmail;
            this.SenderDateOfBirth = SenderDateOfBirth;
            this.SenderDocument1Type = SenderDocument1Type;
            this.SenderDocument1Issue = SenderDocument1Issue;
            this.SenderDocument1Number = SenderDocument1Number;
            this.SenderDocument2Type = SenderDocument2Type;
            this.SenderDocument2Issue = SenderDocument2Issue;
            this.SenderDocument2Number = SenderDocument2Number;
            this.SenderGender = SenderGender;
            this.SenderNationality = SenderNationality;
            this.RecipientUID = RecipientUID;
            this.RecipientLastName = RecipientLastName;
            this.RecipientFirstName = RecipientFirstName;
            this.RecipientCompany = RecipientCompany;
            this.RecipientAddress1 = RecipientAddress1;
            this.RecipientCity = RecipientCity;
            this.RecipientState = RecipientState;
            this.RecipientZip = RecipientZip;
            this.RecipientCountry = RecipientCountry;
            this.RecipientPhone1 = RecipientPhone1;
            this.RecipientPhone2 = RecipientPhone2;
            this.RecipientEmail = RecipientEmail;
            this.RecipientDocument1Type = RecipientDocument1Type;
            this.RecipientDocument1Issuer = RecipientDocument1Issuer;
            this.RecipientDocument1Number = RecipientDocument1Number;
            this.RecipientDocument2Type = RecipientDocument2Type;
            this.RecipientDocument2Issuer = RecipientDocument2Issuer;
            this.RecipientDocument2Number = RecipientDocument2Number;
            this.RecipientBankName = RecipientBankName;
            this.RecipientBankRouting = RecipientBankRouting;
            this.RecipientBranchID = RecipientBranchID;
            this.RecipientBankAccountNo = RecipientBankAccountNo;
            this.RecipientBankAccountID = RecipientBankAccountID;
            this.RecipientBankAddress = RecipientBankAddress;
            this.RecipientTIN = RecipientTIN;
            this.RecipientBankAccoutType = RecipientBankAccoutType;
            this.NetAmountSent = NetAmountSent;
            this.TotalFeeSender = TotalFeeSender;
            this.TotalCollectedFromSender = TotalCollectedFromSender;
            this.ExchangeRateSender = ExchangeRateSender;
            this.CurrencySent = CurrencySent;
            this.ExchangeRateAgent = ExchangeRateAgent;
            this.TotalFeeAgent = TotalFeeAgent;
            this.TotalDueFromAgent = TotalDueFromAgent;
            this.AmountReceived = AmountReceived;
            this.TotalRecipiententFee = TotalRecipiententFee;
            this.TotalPaidToRecipient = TotalPaidToRecipient;
            this.CurrencyOfPayment = CurrencyOfPayment;
            this.CurrencyOfPaymentID = CurrencyOfPaymentID;
            this.ChallengeQuestion = ChallengeQuestion;
            this.ChallengeAnswer = ChallengeAnswer;
            this.PayLocationID = PayLocationID;
            this.PaymentLocation = PaymentLocation;
            this.MessageToRecipient = MessageToRecipient;
            this.PaymentInstructions = PaymentInstructions;
            this.TypeOfPaymentText = TypeOfPaymentText;
            this.TypeOfPaymentID = TypeOfPaymentID;
            this.OrderClaimCode = OrderClaimCode;
            this.Custom1 = Custom1;
            this.Custom2 = Custom2;
            this.Custom3 = Custom3;
            this.Custom4 = Custom4;
            this.SenderOccupation = SenderOccupation;
            this.RelationshipToSender = RelationshipToSender;
            this.PurposeOfOrder = PurposeOfOrder;
            this.OrderFundSource = OrderFundSource;
            this.OrderCardSurcharge = OrderCardSurcharge;
            this.AdditionalChargesDiscounts = AdditionalChargesDiscounts;
            this.ChargesDiscountsDescription = ChargesDiscountsDescription;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateNewOrderResponse", WrapperNamespace="http://mts.geobridge.org/", IsWrapped=true)]
    public partial class CreateNewOrderResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=0)]
        public System.Xml.XmlNode CreateNewOrderResult;
        
        public CreateNewOrderResponse() {
        }
        
        public CreateNewOrderResponse(System.Xml.XmlNode CreateNewOrderResult) {
            this.CreateNewOrderResult = CreateNewOrderResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateNewPayment", WrapperNamespace="http://mts.geobridge.org/", IsWrapped=true)]
    public partial class CreateNewPaymentRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://mts.geobridge.org/")]
        public WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=0)]
        public string AgentID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=1)]
        public string PartnerID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=2)]
        public string AgentOrderReference;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=3)]
        public string OrderCreationTime;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=4)]
        public string SenderUID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=5)]
        public string SenderLastName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=6)]
        public string SenderFirstName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=7)]
        public string SenderCompanyName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=8)]
        public string SenderAddress;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=9)]
        public string SenderCity;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=10)]
        public string SenderState;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=11)]
        public string SenderZip;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=12)]
        public string SenderCountry;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=13)]
        public string SenderPhone1;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=14)]
        public string SenderPhone2;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=15)]
        public string SenderEmail;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=16)]
        public string SenderDateOfBirth;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=17)]
        public string SenderDocument1Type;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=18)]
        public string SenderDocument1Issue;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=19)]
        public string SenderDocument1Number;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=20)]
        public string SenderDocument2Type;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=21)]
        public string SenderDocument2Issue;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=22)]
        public string SenderDocument2Number;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=23)]
        public string SenderGender;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=24)]
        public string SenderNationality;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=25)]
        public string RecipientUID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=26)]
        public string RecipientLastName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=27)]
        public string RecipientFirstName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=28)]
        public string RecipientCompany;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=29)]
        public string RecipientAddress1;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=30)]
        public string RecipientCity;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=31)]
        public string RecipientState;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=32)]
        public string RecipientZip;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=33)]
        public string RecipientCountry;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=34)]
        public string RecipientPhone1;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=35)]
        public string RecipientPhone2;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=36)]
        public string RecipientEmail;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=37)]
        public string RecipientDocument1Type;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=38)]
        public string RecipientDocument1Issuer;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=39)]
        public string RecipientDocument1Number;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=40)]
        public string RecipientDocument2Type;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=41)]
        public string RecipientDocument2Issuer;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=42)]
        public string RecipientDocument2Number;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=43)]
        public string RecipientBillType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=44)]
        public string RecipientBillerName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=45)]
        public string RecipientBillerCode;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=46)]
        public string RecipientBillerAccountNo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=47)]
        public string RecipientBillerUserName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=48)]
        public string RecipientBillerPassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=49)]
        public string RecipientBillerAccountID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=50)]
        public string RecipientTIN;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=51)]
        public string NetAmountSent;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=52)]
        public string TotalFeeSender;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=53)]
        public string TotalCollectedFromSender;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=54)]
        public string ExchangeRateSender;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=55)]
        public string CurrencySent;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=56)]
        public string ExchangeRateAgent;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=57)]
        public string TotalFeeAgent;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=58)]
        public string TotalDueFromAgent;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=59)]
        public string AmountReceived;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=60)]
        public string TotalRecipiententFee;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=61)]
        public string TotalPaidToRecipient;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=62)]
        public string CurrencyOfPayment;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=63)]
        public string CurrencyOfPaymentID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=64)]
        public string ChallengeQuestion;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=65)]
        public string ChallengeAnswer;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=66)]
        public string PayLocationID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=67)]
        public string PaymentLocation;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=68)]
        public string MessageToRecipient;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=69)]
        public string PaymentInstructions;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=70)]
        public string TypeOfPaymentText;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=71)]
        public string TypeOfPaymentID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=72)]
        public string OrderClaimCode;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=73)]
        public string Custom1;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=74)]
        public string Custom2;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=75)]
        public string Custom3;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=76)]
        public string Custom4;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=77)]
        public string SenderOccupation;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=78)]
        public string RelationshipToSender;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=79)]
        public string PurposeOfOrder;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=80)]
        public string OrderFundSource;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=81)]
        public string OrderCardSurcharge;
        
        public CreateNewPaymentRequest() {
        }
        
        public CreateNewPaymentRequest(
                    WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, 
                    string AgentID, 
                    string PartnerID, 
                    string AgentOrderReference, 
                    string OrderCreationTime, 
                    string SenderUID, 
                    string SenderLastName, 
                    string SenderFirstName, 
                    string SenderCompanyName, 
                    string SenderAddress, 
                    string SenderCity, 
                    string SenderState, 
                    string SenderZip, 
                    string SenderCountry, 
                    string SenderPhone1, 
                    string SenderPhone2, 
                    string SenderEmail, 
                    string SenderDateOfBirth, 
                    string SenderDocument1Type, 
                    string SenderDocument1Issue, 
                    string SenderDocument1Number, 
                    string SenderDocument2Type, 
                    string SenderDocument2Issue, 
                    string SenderDocument2Number, 
                    string SenderGender, 
                    string SenderNationality, 
                    string RecipientUID, 
                    string RecipientLastName, 
                    string RecipientFirstName, 
                    string RecipientCompany, 
                    string RecipientAddress1, 
                    string RecipientCity, 
                    string RecipientState, 
                    string RecipientZip, 
                    string RecipientCountry, 
                    string RecipientPhone1, 
                    string RecipientPhone2, 
                    string RecipientEmail, 
                    string RecipientDocument1Type, 
                    string RecipientDocument1Issuer, 
                    string RecipientDocument1Number, 
                    string RecipientDocument2Type, 
                    string RecipientDocument2Issuer, 
                    string RecipientDocument2Number, 
                    string RecipientBillType, 
                    string RecipientBillerName, 
                    string RecipientBillerCode, 
                    string RecipientBillerAccountNo, 
                    string RecipientBillerUserName, 
                    string RecipientBillerPassword, 
                    string RecipientBillerAccountID, 
                    string RecipientTIN, 
                    string NetAmountSent, 
                    string TotalFeeSender, 
                    string TotalCollectedFromSender, 
                    string ExchangeRateSender, 
                    string CurrencySent, 
                    string ExchangeRateAgent, 
                    string TotalFeeAgent, 
                    string TotalDueFromAgent, 
                    string AmountReceived, 
                    string TotalRecipiententFee, 
                    string TotalPaidToRecipient, 
                    string CurrencyOfPayment, 
                    string CurrencyOfPaymentID, 
                    string ChallengeQuestion, 
                    string ChallengeAnswer, 
                    string PayLocationID, 
                    string PaymentLocation, 
                    string MessageToRecipient, 
                    string PaymentInstructions, 
                    string TypeOfPaymentText, 
                    string TypeOfPaymentID, 
                    string OrderClaimCode, 
                    string Custom1, 
                    string Custom2, 
                    string Custom3, 
                    string Custom4, 
                    string SenderOccupation, 
                    string RelationshipToSender, 
                    string PurposeOfOrder, 
                    string OrderFundSource, 
                    string OrderCardSurcharge) {
            this.AuthHeader = AuthHeader;
            this.AgentID = AgentID;
            this.PartnerID = PartnerID;
            this.AgentOrderReference = AgentOrderReference;
            this.OrderCreationTime = OrderCreationTime;
            this.SenderUID = SenderUID;
            this.SenderLastName = SenderLastName;
            this.SenderFirstName = SenderFirstName;
            this.SenderCompanyName = SenderCompanyName;
            this.SenderAddress = SenderAddress;
            this.SenderCity = SenderCity;
            this.SenderState = SenderState;
            this.SenderZip = SenderZip;
            this.SenderCountry = SenderCountry;
            this.SenderPhone1 = SenderPhone1;
            this.SenderPhone2 = SenderPhone2;
            this.SenderEmail = SenderEmail;
            this.SenderDateOfBirth = SenderDateOfBirth;
            this.SenderDocument1Type = SenderDocument1Type;
            this.SenderDocument1Issue = SenderDocument1Issue;
            this.SenderDocument1Number = SenderDocument1Number;
            this.SenderDocument2Type = SenderDocument2Type;
            this.SenderDocument2Issue = SenderDocument2Issue;
            this.SenderDocument2Number = SenderDocument2Number;
            this.SenderGender = SenderGender;
            this.SenderNationality = SenderNationality;
            this.RecipientUID = RecipientUID;
            this.RecipientLastName = RecipientLastName;
            this.RecipientFirstName = RecipientFirstName;
            this.RecipientCompany = RecipientCompany;
            this.RecipientAddress1 = RecipientAddress1;
            this.RecipientCity = RecipientCity;
            this.RecipientState = RecipientState;
            this.RecipientZip = RecipientZip;
            this.RecipientCountry = RecipientCountry;
            this.RecipientPhone1 = RecipientPhone1;
            this.RecipientPhone2 = RecipientPhone2;
            this.RecipientEmail = RecipientEmail;
            this.RecipientDocument1Type = RecipientDocument1Type;
            this.RecipientDocument1Issuer = RecipientDocument1Issuer;
            this.RecipientDocument1Number = RecipientDocument1Number;
            this.RecipientDocument2Type = RecipientDocument2Type;
            this.RecipientDocument2Issuer = RecipientDocument2Issuer;
            this.RecipientDocument2Number = RecipientDocument2Number;
            this.RecipientBillType = RecipientBillType;
            this.RecipientBillerName = RecipientBillerName;
            this.RecipientBillerCode = RecipientBillerCode;
            this.RecipientBillerAccountNo = RecipientBillerAccountNo;
            this.RecipientBillerUserName = RecipientBillerUserName;
            this.RecipientBillerPassword = RecipientBillerPassword;
            this.RecipientBillerAccountID = RecipientBillerAccountID;
            this.RecipientTIN = RecipientTIN;
            this.NetAmountSent = NetAmountSent;
            this.TotalFeeSender = TotalFeeSender;
            this.TotalCollectedFromSender = TotalCollectedFromSender;
            this.ExchangeRateSender = ExchangeRateSender;
            this.CurrencySent = CurrencySent;
            this.ExchangeRateAgent = ExchangeRateAgent;
            this.TotalFeeAgent = TotalFeeAgent;
            this.TotalDueFromAgent = TotalDueFromAgent;
            this.AmountReceived = AmountReceived;
            this.TotalRecipiententFee = TotalRecipiententFee;
            this.TotalPaidToRecipient = TotalPaidToRecipient;
            this.CurrencyOfPayment = CurrencyOfPayment;
            this.CurrencyOfPaymentID = CurrencyOfPaymentID;
            this.ChallengeQuestion = ChallengeQuestion;
            this.ChallengeAnswer = ChallengeAnswer;
            this.PayLocationID = PayLocationID;
            this.PaymentLocation = PaymentLocation;
            this.MessageToRecipient = MessageToRecipient;
            this.PaymentInstructions = PaymentInstructions;
            this.TypeOfPaymentText = TypeOfPaymentText;
            this.TypeOfPaymentID = TypeOfPaymentID;
            this.OrderClaimCode = OrderClaimCode;
            this.Custom1 = Custom1;
            this.Custom2 = Custom2;
            this.Custom3 = Custom3;
            this.Custom4 = Custom4;
            this.SenderOccupation = SenderOccupation;
            this.RelationshipToSender = RelationshipToSender;
            this.PurposeOfOrder = PurposeOfOrder;
            this.OrderFundSource = OrderFundSource;
            this.OrderCardSurcharge = OrderCardSurcharge;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateNewPaymentResponse", WrapperNamespace="http://mts.geobridge.org/", IsWrapped=true)]
    public partial class CreateNewPaymentResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=0)]
        public System.Xml.XmlNode CreateNewPaymentResult;
        
        public CreateNewPaymentResponse() {
        }
        
        public CreateNewPaymentResponse(System.Xml.XmlNode CreateNewPaymentResult) {
            this.CreateNewPaymentResult = CreateNewPaymentResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRatesAndCosts", WrapperNamespace="http://mts.geobridge.org/", IsWrapped=true)]
    public partial class GetRatesAndCostsRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://mts.geobridge.org/")]
        public WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=0)]
        public string AgentID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=1)]
        public string PartnerID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=2)]
        public string SenderCountry;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=3)]
        public string RecipientCountry;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=4)]
        public string NetAmountSent;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=5)]
        public string CurrencySent;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=6)]
        public string AmountReceived;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=7)]
        public string CurrencyOfPayment;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=8)]
        public string CurrencyOfPaymentID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=9)]
        public string PayLocationID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=10)]
        public string PaymentLocation;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=11)]
        public string TypeOfPaymentText;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=12)]
        public string TypeOfPaymentID;
        
        public GetRatesAndCostsRequest() {
        }
        
        public GetRatesAndCostsRequest(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, string AgentID, string PartnerID, string SenderCountry, string RecipientCountry, string NetAmountSent, string CurrencySent, string AmountReceived, string CurrencyOfPayment, string CurrencyOfPaymentID, string PayLocationID, string PaymentLocation, string TypeOfPaymentText, string TypeOfPaymentID) {
            this.AuthHeader = AuthHeader;
            this.AgentID = AgentID;
            this.PartnerID = PartnerID;
            this.SenderCountry = SenderCountry;
            this.RecipientCountry = RecipientCountry;
            this.NetAmountSent = NetAmountSent;
            this.CurrencySent = CurrencySent;
            this.AmountReceived = AmountReceived;
            this.CurrencyOfPayment = CurrencyOfPayment;
            this.CurrencyOfPaymentID = CurrencyOfPaymentID;
            this.PayLocationID = PayLocationID;
            this.PaymentLocation = PaymentLocation;
            this.TypeOfPaymentText = TypeOfPaymentText;
            this.TypeOfPaymentID = TypeOfPaymentID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRatesAndCostsResponse", WrapperNamespace="http://mts.geobridge.org/", IsWrapped=true)]
    public partial class GetRatesAndCostsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=0)]
        public System.Xml.XmlNode GetRatesAndCostsResult;
        
        public GetRatesAndCostsResponse() {
        }
        
        public GetRatesAndCostsResponse(System.Xml.XmlNode GetRatesAndCostsResult) {
            this.GetRatesAndCostsResult = GetRatesAndCostsResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetPaymentLocations", WrapperNamespace="http://mts.geobridge.org/", IsWrapped=true)]
    public partial class GetPaymentLocationsRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://mts.geobridge.org/")]
        public WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=0)]
        public string AgentID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=1)]
        public string PartnerID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=2)]
        public string CurrencyOfPaymentID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=3)]
        public string TypeOfPaymentID;
        
        public GetPaymentLocationsRequest() {
        }
        
        public GetPaymentLocationsRequest(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, string AgentID, string PartnerID, string CurrencyOfPaymentID, string TypeOfPaymentID) {
            this.AuthHeader = AuthHeader;
            this.AgentID = AgentID;
            this.PartnerID = PartnerID;
            this.CurrencyOfPaymentID = CurrencyOfPaymentID;
            this.TypeOfPaymentID = TypeOfPaymentID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetPaymentLocationsResponse", WrapperNamespace="http://mts.geobridge.org/", IsWrapped=true)]
    public partial class GetPaymentLocationsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=0)]
        public System.Xml.XmlNode GetPaymentLocationsResult;
        
        public GetPaymentLocationsResponse() {
        }
        
        public GetPaymentLocationsResponse(System.Xml.XmlNode GetPaymentLocationsResult) {
            this.GetPaymentLocationsResult = GetPaymentLocationsResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetOrderDetails", WrapperNamespace="http://mts.geobridge.org/", IsWrapped=true)]
    public partial class GetOrderDetailsRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://mts.geobridge.org/")]
        public WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=0)]
        public string AgentID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=1)]
        public string PartnerID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=2)]
        public string AgentOrderReference;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=3)]
        public string OrderId;
        
        public GetOrderDetailsRequest() {
        }
        
        public GetOrderDetailsRequest(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, string AgentID, string PartnerID, string AgentOrderReference, string OrderId) {
            this.AuthHeader = AuthHeader;
            this.AgentID = AgentID;
            this.PartnerID = PartnerID;
            this.AgentOrderReference = AgentOrderReference;
            this.OrderId = OrderId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetOrderDetailsResponse", WrapperNamespace="http://mts.geobridge.org/", IsWrapped=true)]
    public partial class GetOrderDetailsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=0)]
        public System.Xml.XmlNode GetOrderDetailsResult;
        
        public GetOrderDetailsResponse() {
        }
        
        public GetOrderDetailsResponse(System.Xml.XmlNode GetOrderDetailsResult) {
            this.GetOrderDetailsResult = GetOrderDetailsResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCancelationByCancelDate", WrapperNamespace="http://mts.geobridge.org/", IsWrapped=true)]
    public partial class GetCancelationByCancelDateRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://mts.geobridge.org/")]
        public WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=0)]
        public string AgentID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=1)]
        public string PartnerID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=2)]
        public string CanceledDate;
        
        public GetCancelationByCancelDateRequest() {
        }
        
        public GetCancelationByCancelDateRequest(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, string AgentID, string PartnerID, string CanceledDate) {
            this.AuthHeader = AuthHeader;
            this.AgentID = AgentID;
            this.PartnerID = PartnerID;
            this.CanceledDate = CanceledDate;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCancelationByCancelDateResponse", WrapperNamespace="http://mts.geobridge.org/", IsWrapped=true)]
    public partial class GetCancelationByCancelDateResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=0)]
        public System.Xml.XmlNode GetCancelationByCancelDateResult;
        
        public GetCancelationByCancelDateResponse() {
        }
        
        public GetCancelationByCancelDateResponse(System.Xml.XmlNode GetCancelationByCancelDateResult) {
            this.GetCancelationByCancelDateResult = GetCancelationByCancelDateResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetClientAccountChangesByDate", WrapperNamespace="http://mts.geobridge.org/", IsWrapped=true)]
    public partial class GetClientAccountChangesByDateRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://mts.geobridge.org/")]
        public WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=0)]
        public string AgentID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=1)]
        public string PartnerID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=2)]
        public string InitialDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=3)]
        public string EndDate;
        
        public GetClientAccountChangesByDateRequest() {
        }
        
        public GetClientAccountChangesByDateRequest(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, string AgentID, string PartnerID, string InitialDate, string EndDate) {
            this.AuthHeader = AuthHeader;
            this.AgentID = AgentID;
            this.PartnerID = PartnerID;
            this.InitialDate = InitialDate;
            this.EndDate = EndDate;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetClientAccountChangesByDateResponse", WrapperNamespace="http://mts.geobridge.org/", IsWrapped=true)]
    public partial class GetClientAccountChangesByDateResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=0)]
        public System.Xml.XmlNode GetClientAccountChangesByDateResult;
        
        public GetClientAccountChangesByDateResponse() {
        }
        
        public GetClientAccountChangesByDateResponse(System.Xml.XmlNode GetClientAccountChangesByDateResult) {
            this.GetClientAccountChangesByDateResult = GetClientAccountChangesByDateResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCurrencyTypesOfPayment", WrapperNamespace="http://mts.geobridge.org/", IsWrapped=true)]
    public partial class GetCurrencyTypesOfPaymentRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://mts.geobridge.org/")]
        public WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=0)]
        public string AgentID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=1)]
        public string PartnerID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=2)]
        public string SenderCountry;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=3)]
        public string RecipientCountry;
        
        public GetCurrencyTypesOfPaymentRequest() {
        }
        
        public GetCurrencyTypesOfPaymentRequest(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, string AgentID, string PartnerID, string SenderCountry, string RecipientCountry) {
            this.AuthHeader = AuthHeader;
            this.AgentID = AgentID;
            this.PartnerID = PartnerID;
            this.SenderCountry = SenderCountry;
            this.RecipientCountry = RecipientCountry;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCurrencyTypesOfPaymentResponse", WrapperNamespace="http://mts.geobridge.org/", IsWrapped=true)]
    public partial class GetCurrencyTypesOfPaymentResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=0)]
        public System.Xml.XmlNode GetCurrencyTypesOfPaymentResult;
        
        public GetCurrencyTypesOfPaymentResponse() {
        }
        
        public GetCurrencyTypesOfPaymentResponse(System.Xml.XmlNode GetCurrencyTypesOfPaymentResult) {
            this.GetCurrencyTypesOfPaymentResult = GetCurrencyTypesOfPaymentResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UpdateOrder", WrapperNamespace="http://mts.geobridge.org/", IsWrapped=true)]
    public partial class UpdateOrderRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://mts.geobridge.org/")]
        public WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=0)]
        public string AgentID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=1)]
        public string PartnerID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=2)]
        public string AgentOrderReference;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=3)]
        public string OrderCreationTime;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=4)]
        public string SenderUID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=5)]
        public string SenderLastName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=6)]
        public string SenderFirstName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=7)]
        public string SenderCompanyName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=8)]
        public string SenderAddress;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=9)]
        public string SenderCity;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=10)]
        public string SenderState;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=11)]
        public string SenderZip;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=12)]
        public string SenderCountry;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=13)]
        public string SenderPhone1;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=14)]
        public string SenderPhone2;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=15)]
        public string SenderEmail;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=16)]
        public string SenderDateOfBirth;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=17)]
        public string SenderDocument1Type;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=18)]
        public string SenderDocument1Issue;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=19)]
        public string SenderDocument1Number;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=20)]
        public string SenderDocument2Type;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=21)]
        public string SenderDocument2Issue;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=22)]
        public string SenderDocument2Number;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=23)]
        public string RecipientUID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=24)]
        public string RecipientLastName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=25)]
        public string RecipientFirstName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=26)]
        public string RecipientCompany;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=27)]
        public string RecipientAddress1;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=28)]
        public string RecipientCity;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=29)]
        public string RecipientState;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=30)]
        public string RecipientZip;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=31)]
        public string RecipientCountry;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=32)]
        public string RecipientPhone1;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=33)]
        public string RecipientPhone2;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=34)]
        public string RecipientEmail;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=35)]
        public string RecipientDocument1Type;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=36)]
        public string RecipientDocument1Issuer;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=37)]
        public string RecipientDocument1Number;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=38)]
        public string RecipientDocument2Type;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=39)]
        public string RecipientDocument2Issuer;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=40)]
        public string RecipientDocument2Number;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=41)]
        public string RecipientBankName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=42)]
        public string RecipientBankRouting;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=43)]
        public string RecipientBranchID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=44)]
        public string RecipientBankAccountNo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=45)]
        public string RecipientBankAccountID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=46)]
        public string RecipientTIN;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=47)]
        public string RecipientBankAccoutType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=48)]
        public string NetAmountSent;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=49)]
        public string TotalFeeSender;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=50)]
        public string TotalCollectedFromSender;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=51)]
        public string ExchangeRateSender;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=52)]
        public string CurrencySent;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=53)]
        public string ExchangeRateAgent;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=54)]
        public string TotalFeeAgent;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=55)]
        public string TotalDueFromAgent;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=56)]
        public string AmountReceived;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=57)]
        public string TotalRecipiententFee;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=58)]
        public string TotalPaidToRecipient;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=59)]
        public string CurrencyOfPayment;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=60)]
        public string CurrencyOfPaymentID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=61)]
        public string ChallengeQuestion;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=62)]
        public string ChallengeAnswer;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=63)]
        public string PayLocationID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=64)]
        public string PaymentLocation;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=65)]
        public string MessageToRecipient;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=66)]
        public string PaymentInstructions;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=67)]
        public string TypeOfPaymentText;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=68)]
        public string TypeOfPaymentID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=69)]
        public string OrderClaimCode;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=70)]
        public string Custom1;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=71)]
        public string Custom2;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=72)]
        public string Custom3;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=73)]
        public string Custom4;
        
        public UpdateOrderRequest() {
        }
        
        public UpdateOrderRequest(
                    WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, 
                    string AgentID, 
                    string PartnerID, 
                    string AgentOrderReference, 
                    string OrderCreationTime, 
                    string SenderUID, 
                    string SenderLastName, 
                    string SenderFirstName, 
                    string SenderCompanyName, 
                    string SenderAddress, 
                    string SenderCity, 
                    string SenderState, 
                    string SenderZip, 
                    string SenderCountry, 
                    string SenderPhone1, 
                    string SenderPhone2, 
                    string SenderEmail, 
                    string SenderDateOfBirth, 
                    string SenderDocument1Type, 
                    string SenderDocument1Issue, 
                    string SenderDocument1Number, 
                    string SenderDocument2Type, 
                    string SenderDocument2Issue, 
                    string SenderDocument2Number, 
                    string RecipientUID, 
                    string RecipientLastName, 
                    string RecipientFirstName, 
                    string RecipientCompany, 
                    string RecipientAddress1, 
                    string RecipientCity, 
                    string RecipientState, 
                    string RecipientZip, 
                    string RecipientCountry, 
                    string RecipientPhone1, 
                    string RecipientPhone2, 
                    string RecipientEmail, 
                    string RecipientDocument1Type, 
                    string RecipientDocument1Issuer, 
                    string RecipientDocument1Number, 
                    string RecipientDocument2Type, 
                    string RecipientDocument2Issuer, 
                    string RecipientDocument2Number, 
                    string RecipientBankName, 
                    string RecipientBankRouting, 
                    string RecipientBranchID, 
                    string RecipientBankAccountNo, 
                    string RecipientBankAccountID, 
                    string RecipientTIN, 
                    string RecipientBankAccoutType, 
                    string NetAmountSent, 
                    string TotalFeeSender, 
                    string TotalCollectedFromSender, 
                    string ExchangeRateSender, 
                    string CurrencySent, 
                    string ExchangeRateAgent, 
                    string TotalFeeAgent, 
                    string TotalDueFromAgent, 
                    string AmountReceived, 
                    string TotalRecipiententFee, 
                    string TotalPaidToRecipient, 
                    string CurrencyOfPayment, 
                    string CurrencyOfPaymentID, 
                    string ChallengeQuestion, 
                    string ChallengeAnswer, 
                    string PayLocationID, 
                    string PaymentLocation, 
                    string MessageToRecipient, 
                    string PaymentInstructions, 
                    string TypeOfPaymentText, 
                    string TypeOfPaymentID, 
                    string OrderClaimCode, 
                    string Custom1, 
                    string Custom2, 
                    string Custom3, 
                    string Custom4) {
            this.AuthHeader = AuthHeader;
            this.AgentID = AgentID;
            this.PartnerID = PartnerID;
            this.AgentOrderReference = AgentOrderReference;
            this.OrderCreationTime = OrderCreationTime;
            this.SenderUID = SenderUID;
            this.SenderLastName = SenderLastName;
            this.SenderFirstName = SenderFirstName;
            this.SenderCompanyName = SenderCompanyName;
            this.SenderAddress = SenderAddress;
            this.SenderCity = SenderCity;
            this.SenderState = SenderState;
            this.SenderZip = SenderZip;
            this.SenderCountry = SenderCountry;
            this.SenderPhone1 = SenderPhone1;
            this.SenderPhone2 = SenderPhone2;
            this.SenderEmail = SenderEmail;
            this.SenderDateOfBirth = SenderDateOfBirth;
            this.SenderDocument1Type = SenderDocument1Type;
            this.SenderDocument1Issue = SenderDocument1Issue;
            this.SenderDocument1Number = SenderDocument1Number;
            this.SenderDocument2Type = SenderDocument2Type;
            this.SenderDocument2Issue = SenderDocument2Issue;
            this.SenderDocument2Number = SenderDocument2Number;
            this.RecipientUID = RecipientUID;
            this.RecipientLastName = RecipientLastName;
            this.RecipientFirstName = RecipientFirstName;
            this.RecipientCompany = RecipientCompany;
            this.RecipientAddress1 = RecipientAddress1;
            this.RecipientCity = RecipientCity;
            this.RecipientState = RecipientState;
            this.RecipientZip = RecipientZip;
            this.RecipientCountry = RecipientCountry;
            this.RecipientPhone1 = RecipientPhone1;
            this.RecipientPhone2 = RecipientPhone2;
            this.RecipientEmail = RecipientEmail;
            this.RecipientDocument1Type = RecipientDocument1Type;
            this.RecipientDocument1Issuer = RecipientDocument1Issuer;
            this.RecipientDocument1Number = RecipientDocument1Number;
            this.RecipientDocument2Type = RecipientDocument2Type;
            this.RecipientDocument2Issuer = RecipientDocument2Issuer;
            this.RecipientDocument2Number = RecipientDocument2Number;
            this.RecipientBankName = RecipientBankName;
            this.RecipientBankRouting = RecipientBankRouting;
            this.RecipientBranchID = RecipientBranchID;
            this.RecipientBankAccountNo = RecipientBankAccountNo;
            this.RecipientBankAccountID = RecipientBankAccountID;
            this.RecipientTIN = RecipientTIN;
            this.RecipientBankAccoutType = RecipientBankAccoutType;
            this.NetAmountSent = NetAmountSent;
            this.TotalFeeSender = TotalFeeSender;
            this.TotalCollectedFromSender = TotalCollectedFromSender;
            this.ExchangeRateSender = ExchangeRateSender;
            this.CurrencySent = CurrencySent;
            this.ExchangeRateAgent = ExchangeRateAgent;
            this.TotalFeeAgent = TotalFeeAgent;
            this.TotalDueFromAgent = TotalDueFromAgent;
            this.AmountReceived = AmountReceived;
            this.TotalRecipiententFee = TotalRecipiententFee;
            this.TotalPaidToRecipient = TotalPaidToRecipient;
            this.CurrencyOfPayment = CurrencyOfPayment;
            this.CurrencyOfPaymentID = CurrencyOfPaymentID;
            this.ChallengeQuestion = ChallengeQuestion;
            this.ChallengeAnswer = ChallengeAnswer;
            this.PayLocationID = PayLocationID;
            this.PaymentLocation = PaymentLocation;
            this.MessageToRecipient = MessageToRecipient;
            this.PaymentInstructions = PaymentInstructions;
            this.TypeOfPaymentText = TypeOfPaymentText;
            this.TypeOfPaymentID = TypeOfPaymentID;
            this.OrderClaimCode = OrderClaimCode;
            this.Custom1 = Custom1;
            this.Custom2 = Custom2;
            this.Custom3 = Custom3;
            this.Custom4 = Custom4;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UpdateOrderResponse", WrapperNamespace="http://mts.geobridge.org/", IsWrapped=true)]
    public partial class UpdateOrderResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=0)]
        public System.Xml.XmlNode UpdateOrderResult;
        
        public UpdateOrderResponse() {
        }
        
        public UpdateOrderResponse(System.Xml.XmlNode UpdateOrderResult) {
            this.UpdateOrderResult = UpdateOrderResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCurrenciesOfPayment", WrapperNamespace="http://mts.geobridge.org/", IsWrapped=true)]
    public partial class GetCurrenciesOfPaymentRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://mts.geobridge.org/")]
        public WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=0)]
        public string AgentID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=1)]
        public string PartnerID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=2)]
        public string SenderCountry;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=3)]
        public string RecipientCountry;
        
        public GetCurrenciesOfPaymentRequest() {
        }
        
        public GetCurrenciesOfPaymentRequest(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, string AgentID, string PartnerID, string SenderCountry, string RecipientCountry) {
            this.AuthHeader = AuthHeader;
            this.AgentID = AgentID;
            this.PartnerID = PartnerID;
            this.SenderCountry = SenderCountry;
            this.RecipientCountry = RecipientCountry;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCurrenciesOfPaymentResponse", WrapperNamespace="http://mts.geobridge.org/", IsWrapped=true)]
    public partial class GetCurrenciesOfPaymentResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=0)]
        public System.Xml.XmlNode GetCurrenciesOfPaymentResult;
        
        public GetCurrenciesOfPaymentResponse() {
        }
        
        public GetCurrenciesOfPaymentResponse(System.Xml.XmlNode GetCurrenciesOfPaymentResult) {
            this.GetCurrenciesOfPaymentResult = GetCurrenciesOfPaymentResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ValidateBillPayment", WrapperNamespace="http://mts.geobridge.org/", IsWrapped=true)]
    public partial class ValidateBillPaymentRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://mts.geobridge.org/")]
        public WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=0)]
        public string AgentID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=1)]
        public string PartnerID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=2)]
        public string SenderCountry;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=3)]
        public string RecipientLastName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=4)]
        public string RecipientFirstName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=5)]
        public string RecipientCompany;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=6)]
        public string RecipientCountry;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=7)]
        public string RecipientBillType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=8)]
        public string RecipientBillerName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=9)]
        public string RecipientBillerCode;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=10)]
        public string RecipientBillerAccountNo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=11)]
        public string RecipientBillerUserName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=12)]
        public string RecipientBillerPassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=13)]
        public string RecipientTIN;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=14)]
        public string NetAmountSent;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=15)]
        public string BillDueDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=16)]
        public string ExchangeRateSender;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=17)]
        public string CurrencySent;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=18)]
        public string TotalPaidToBiller;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=19)]
        public string CurrencyOfPayment;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=20)]
        public string TypeOfPaymentID;
        
        public ValidateBillPaymentRequest() {
        }
        
        public ValidateBillPaymentRequest(
                    WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, 
                    string AgentID, 
                    string PartnerID, 
                    string SenderCountry, 
                    string RecipientLastName, 
                    string RecipientFirstName, 
                    string RecipientCompany, 
                    string RecipientCountry, 
                    string RecipientBillType, 
                    string RecipientBillerName, 
                    string RecipientBillerCode, 
                    string RecipientBillerAccountNo, 
                    string RecipientBillerUserName, 
                    string RecipientBillerPassword, 
                    string RecipientTIN, 
                    string NetAmountSent, 
                    string BillDueDate, 
                    string ExchangeRateSender, 
                    string CurrencySent, 
                    string TotalPaidToBiller, 
                    string CurrencyOfPayment, 
                    string TypeOfPaymentID) {
            this.AuthHeader = AuthHeader;
            this.AgentID = AgentID;
            this.PartnerID = PartnerID;
            this.SenderCountry = SenderCountry;
            this.RecipientLastName = RecipientLastName;
            this.RecipientFirstName = RecipientFirstName;
            this.RecipientCompany = RecipientCompany;
            this.RecipientCountry = RecipientCountry;
            this.RecipientBillType = RecipientBillType;
            this.RecipientBillerName = RecipientBillerName;
            this.RecipientBillerCode = RecipientBillerCode;
            this.RecipientBillerAccountNo = RecipientBillerAccountNo;
            this.RecipientBillerUserName = RecipientBillerUserName;
            this.RecipientBillerPassword = RecipientBillerPassword;
            this.RecipientTIN = RecipientTIN;
            this.NetAmountSent = NetAmountSent;
            this.BillDueDate = BillDueDate;
            this.ExchangeRateSender = ExchangeRateSender;
            this.CurrencySent = CurrencySent;
            this.TotalPaidToBiller = TotalPaidToBiller;
            this.CurrencyOfPayment = CurrencyOfPayment;
            this.TypeOfPaymentID = TypeOfPaymentID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ValidateBillPaymentResponse", WrapperNamespace="http://mts.geobridge.org/", IsWrapped=true)]
    public partial class ValidateBillPaymentResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=0)]
        public System.Xml.XmlNode ValidateBillPaymentResult;
        
        public ValidateBillPaymentResponse() {
        }
        
        public ValidateBillPaymentResponse(System.Xml.XmlNode ValidateBillPaymentResult) {
            this.ValidateBillPaymentResult = ValidateBillPaymentResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetOrderStatus", WrapperNamespace="http://mts.geobridge.org/", IsWrapped=true)]
    public partial class GetOrderStatusRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://mts.geobridge.org/")]
        public WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=0)]
        public string AgentID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=1)]
        public string PartnerID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=2)]
        public string AgentOrderReference;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=3)]
        public string OrderID;
        
        public GetOrderStatusRequest() {
        }
        
        public GetOrderStatusRequest(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, string AgentID, string PartnerID, string AgentOrderReference, string OrderID) {
            this.AuthHeader = AuthHeader;
            this.AgentID = AgentID;
            this.PartnerID = PartnerID;
            this.AgentOrderReference = AgentOrderReference;
            this.OrderID = OrderID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetOrderStatusResponse", WrapperNamespace="http://mts.geobridge.org/", IsWrapped=true)]
    public partial class GetOrderStatusResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=0)]
        public System.Xml.XmlNode GetOrderStatusResult;
        
        public GetOrderStatusResponse() {
        }
        
        public GetOrderStatusResponse(System.Xml.XmlNode GetOrderStatusResult) {
            this.GetOrderStatusResult = GetOrderStatusResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetPdfPaymentReceipt", WrapperNamespace="http://mts.geobridge.org/", IsWrapped=true)]
    public partial class GetPdfPaymentReceiptRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://mts.geobridge.org/")]
        public WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=0)]
        public string OrderID;
        
        public GetPdfPaymentReceiptRequest() {
        }
        
        public GetPdfPaymentReceiptRequest(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, string OrderID) {
            this.AuthHeader = AuthHeader;
            this.OrderID = OrderID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetPdfPaymentReceiptResponse", WrapperNamespace="http://mts.geobridge.org/", IsWrapped=true)]
    public partial class GetPdfPaymentReceiptResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=0)]
        public System.Xml.XmlNode GetPdfPaymentReceiptResult;
        
        public GetPdfPaymentReceiptResponse() {
        }
        
        public GetPdfPaymentReceiptResponse(System.Xml.XmlNode GetPdfPaymentReceiptResult) {
            this.GetPdfPaymentReceiptResult = GetPdfPaymentReceiptResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetActiveCountries", WrapperNamespace="http://mts.geobridge.org/", IsWrapped=true)]
    public partial class GetActiveCountriesRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://mts.geobridge.org/")]
        public WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=0)]
        public string AgentID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=1)]
        public string PartnerID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=2)]
        public string SenderCountry;
        
        public GetActiveCountriesRequest() {
        }
        
        public GetActiveCountriesRequest(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, string AgentID, string PartnerID, string SenderCountry) {
            this.AuthHeader = AuthHeader;
            this.AgentID = AgentID;
            this.PartnerID = PartnerID;
            this.SenderCountry = SenderCountry;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetActiveCountriesResponse", WrapperNamespace="http://mts.geobridge.org/", IsWrapped=true)]
    public partial class GetActiveCountriesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=0)]
        public System.Xml.XmlNode GetActiveCountriesResult;
        
        public GetActiveCountriesResponse() {
        }
        
        public GetActiveCountriesResponse(System.Xml.XmlNode GetActiveCountriesResult) {
            this.GetActiveCountriesResult = GetActiveCountriesResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetPartnerBalance", WrapperNamespace="http://mts.geobridge.org/", IsWrapped=true)]
    public partial class GetPartnerBalanceRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://mts.geobridge.org/")]
        public WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=0)]
        public string AgentID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=1)]
        public string PartnerID;
        
        public GetPartnerBalanceRequest() {
        }
        
        public GetPartnerBalanceRequest(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, string AgentID, string PartnerID) {
            this.AuthHeader = AuthHeader;
            this.AgentID = AgentID;
            this.PartnerID = PartnerID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetPartnerBalanceResponse", WrapperNamespace="http://mts.geobridge.org/", IsWrapped=true)]
    public partial class GetPartnerBalanceResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=0)]
        public System.Xml.XmlNode GetPartnerBalanceResult;
        
        public GetPartnerBalanceResponse() {
        }
        
        public GetPartnerBalanceResponse(System.Xml.XmlNode GetPartnerBalanceResult) {
            this.GetPartnerBalanceResult = GetPartnerBalanceResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetPaymentsByDate", WrapperNamespace="http://mts.geobridge.org/", IsWrapped=true)]
    public partial class GetPaymentsByDateRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://mts.geobridge.org/")]
        public WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=0)]
        public string AgentID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=1)]
        public string PartnerID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=2)]
        public string PaymentConfirmationDate;
        
        public GetPaymentsByDateRequest() {
        }
        
        public GetPaymentsByDateRequest(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, string AgentID, string PartnerID, string PaymentConfirmationDate) {
            this.AuthHeader = AuthHeader;
            this.AgentID = AgentID;
            this.PartnerID = PartnerID;
            this.PaymentConfirmationDate = PaymentConfirmationDate;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetPaymentsByDateResponse", WrapperNamespace="http://mts.geobridge.org/", IsWrapped=true)]
    public partial class GetPaymentsByDateResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mts.geobridge.org/", Order=0)]
        public System.Xml.XmlNode GetPaymentsByDateResult;
        
        public GetPaymentsByDateResponse() {
        }
        
        public GetPaymentsByDateResponse(System.Xml.XmlNode GetPaymentsByDateResult) {
            this.GetPaymentsByDateResult = GetPaymentsByDateResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface mtsSoapChannel : WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class mtsSoapClient : System.ServiceModel.ClientBase<WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap>, WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap {
        
        public mtsSoapClient() {
        }
        
        public mtsSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public mtsSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public mtsSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public mtsSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebRequestGetOrderStatusProfiler.OrderAPI.GetTypesOfPaymentResponse WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap.GetTypesOfPayment(WebRequestGetOrderStatusProfiler.OrderAPI.GetTypesOfPaymentRequest request) {
            return base.Channel.GetTypesOfPayment(request);
        }
        
        public System.Xml.XmlNode GetTypesOfPayment(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, string AgentID, string PartnerID, string SenderCountry, string RecipientCountry) {
            WebRequestGetOrderStatusProfiler.OrderAPI.GetTypesOfPaymentRequest inValue = new WebRequestGetOrderStatusProfiler.OrderAPI.GetTypesOfPaymentRequest();
            inValue.AuthHeader = AuthHeader;
            inValue.AgentID = AgentID;
            inValue.PartnerID = PartnerID;
            inValue.SenderCountry = SenderCountry;
            inValue.RecipientCountry = RecipientCountry;
            WebRequestGetOrderStatusProfiler.OrderAPI.GetTypesOfPaymentResponse retVal = ((WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap)(this)).GetTypesOfPayment(inValue);
            return retVal.GetTypesOfPaymentResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetTypesOfPaymentResponse> WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap.GetTypesOfPaymentAsync(WebRequestGetOrderStatusProfiler.OrderAPI.GetTypesOfPaymentRequest request) {
            return base.Channel.GetTypesOfPaymentAsync(request);
        }
        
        public System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetTypesOfPaymentResponse> GetTypesOfPaymentAsync(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, string AgentID, string PartnerID, string SenderCountry, string RecipientCountry) {
            WebRequestGetOrderStatusProfiler.OrderAPI.GetTypesOfPaymentRequest inValue = new WebRequestGetOrderStatusProfiler.OrderAPI.GetTypesOfPaymentRequest();
            inValue.AuthHeader = AuthHeader;
            inValue.AgentID = AgentID;
            inValue.PartnerID = PartnerID;
            inValue.SenderCountry = SenderCountry;
            inValue.RecipientCountry = RecipientCountry;
            return ((WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap)(this)).GetTypesOfPaymentAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebRequestGetOrderStatusProfiler.OrderAPI.GetErrorListResponse WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap.GetErrorList(WebRequestGetOrderStatusProfiler.OrderAPI.GetErrorListRequest request) {
            return base.Channel.GetErrorList(request);
        }
        
        public System.Xml.XmlNode GetErrorList(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader) {
            WebRequestGetOrderStatusProfiler.OrderAPI.GetErrorListRequest inValue = new WebRequestGetOrderStatusProfiler.OrderAPI.GetErrorListRequest();
            inValue.AuthHeader = AuthHeader;
            WebRequestGetOrderStatusProfiler.OrderAPI.GetErrorListResponse retVal = ((WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap)(this)).GetErrorList(inValue);
            return retVal.GetErrorListResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetErrorListResponse> WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap.GetErrorListAsync(WebRequestGetOrderStatusProfiler.OrderAPI.GetErrorListRequest request) {
            return base.Channel.GetErrorListAsync(request);
        }
        
        public System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetErrorListResponse> GetErrorListAsync(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader) {
            WebRequestGetOrderStatusProfiler.OrderAPI.GetErrorListRequest inValue = new WebRequestGetOrderStatusProfiler.OrderAPI.GetErrorListRequest();
            inValue.AuthHeader = AuthHeader;
            return ((WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap)(this)).GetErrorListAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebRequestGetOrderStatusProfiler.OrderAPI.CreateNewOrderResponse WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap.CreateNewOrder(WebRequestGetOrderStatusProfiler.OrderAPI.CreateNewOrderRequest request) {
            return base.Channel.CreateNewOrder(request);
        }
        
        public System.Xml.XmlNode CreateNewOrder(
                    WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, 
                    string AgentID, 
                    string PartnerID, 
                    string AgentOrderReference, 
                    string OrderCreationTime, 
                    string SenderUID, 
                    string SenderLastName, 
                    string SenderFirstName, 
                    string SenderCompanyName, 
                    string SenderAddress, 
                    string SenderCity, 
                    string SenderState, 
                    string SenderZip, 
                    string SenderCountry, 
                    string SenderPhone1, 
                    string SenderPhone2, 
                    string SenderEmail, 
                    string SenderDateOfBirth, 
                    string SenderDocument1Type, 
                    string SenderDocument1Issue, 
                    string SenderDocument1Number, 
                    string SenderDocument2Type, 
                    string SenderDocument2Issue, 
                    string SenderDocument2Number, 
                    string SenderGender, 
                    string SenderNationality, 
                    string RecipientUID, 
                    string RecipientLastName, 
                    string RecipientFirstName, 
                    string RecipientCompany, 
                    string RecipientAddress1, 
                    string RecipientCity, 
                    string RecipientState, 
                    string RecipientZip, 
                    string RecipientCountry, 
                    string RecipientPhone1, 
                    string RecipientPhone2, 
                    string RecipientEmail, 
                    string RecipientDocument1Type, 
                    string RecipientDocument1Issuer, 
                    string RecipientDocument1Number, 
                    string RecipientDocument2Type, 
                    string RecipientDocument2Issuer, 
                    string RecipientDocument2Number, 
                    string RecipientBankName, 
                    string RecipientBankRouting, 
                    string RecipientBranchID, 
                    string RecipientBankAccountNo, 
                    string RecipientBankAccountID, 
                    string RecipientBankAddress, 
                    string RecipientTIN, 
                    string RecipientBankAccoutType, 
                    string NetAmountSent, 
                    string TotalFeeSender, 
                    string TotalCollectedFromSender, 
                    string ExchangeRateSender, 
                    string CurrencySent, 
                    string ExchangeRateAgent, 
                    string TotalFeeAgent, 
                    string TotalDueFromAgent, 
                    string AmountReceived, 
                    string TotalRecipiententFee, 
                    string TotalPaidToRecipient, 
                    string CurrencyOfPayment, 
                    string CurrencyOfPaymentID, 
                    string ChallengeQuestion, 
                    string ChallengeAnswer, 
                    string PayLocationID, 
                    string PaymentLocation, 
                    string MessageToRecipient, 
                    string PaymentInstructions, 
                    string TypeOfPaymentText, 
                    string TypeOfPaymentID, 
                    string OrderClaimCode, 
                    string Custom1, 
                    string Custom2, 
                    string Custom3, 
                    string Custom4, 
                    string SenderOccupation, 
                    string RelationshipToSender, 
                    string PurposeOfOrder, 
                    string OrderFundSource, 
                    string OrderCardSurcharge, 
                    string AdditionalChargesDiscounts, 
                    string ChargesDiscountsDescription) {
            WebRequestGetOrderStatusProfiler.OrderAPI.CreateNewOrderRequest inValue = new WebRequestGetOrderStatusProfiler.OrderAPI.CreateNewOrderRequest();
            inValue.AuthHeader = AuthHeader;
            inValue.AgentID = AgentID;
            inValue.PartnerID = PartnerID;
            inValue.AgentOrderReference = AgentOrderReference;
            inValue.OrderCreationTime = OrderCreationTime;
            inValue.SenderUID = SenderUID;
            inValue.SenderLastName = SenderLastName;
            inValue.SenderFirstName = SenderFirstName;
            inValue.SenderCompanyName = SenderCompanyName;
            inValue.SenderAddress = SenderAddress;
            inValue.SenderCity = SenderCity;
            inValue.SenderState = SenderState;
            inValue.SenderZip = SenderZip;
            inValue.SenderCountry = SenderCountry;
            inValue.SenderPhone1 = SenderPhone1;
            inValue.SenderPhone2 = SenderPhone2;
            inValue.SenderEmail = SenderEmail;
            inValue.SenderDateOfBirth = SenderDateOfBirth;
            inValue.SenderDocument1Type = SenderDocument1Type;
            inValue.SenderDocument1Issue = SenderDocument1Issue;
            inValue.SenderDocument1Number = SenderDocument1Number;
            inValue.SenderDocument2Type = SenderDocument2Type;
            inValue.SenderDocument2Issue = SenderDocument2Issue;
            inValue.SenderDocument2Number = SenderDocument2Number;
            inValue.SenderGender = SenderGender;
            inValue.SenderNationality = SenderNationality;
            inValue.RecipientUID = RecipientUID;
            inValue.RecipientLastName = RecipientLastName;
            inValue.RecipientFirstName = RecipientFirstName;
            inValue.RecipientCompany = RecipientCompany;
            inValue.RecipientAddress1 = RecipientAddress1;
            inValue.RecipientCity = RecipientCity;
            inValue.RecipientState = RecipientState;
            inValue.RecipientZip = RecipientZip;
            inValue.RecipientCountry = RecipientCountry;
            inValue.RecipientPhone1 = RecipientPhone1;
            inValue.RecipientPhone2 = RecipientPhone2;
            inValue.RecipientEmail = RecipientEmail;
            inValue.RecipientDocument1Type = RecipientDocument1Type;
            inValue.RecipientDocument1Issuer = RecipientDocument1Issuer;
            inValue.RecipientDocument1Number = RecipientDocument1Number;
            inValue.RecipientDocument2Type = RecipientDocument2Type;
            inValue.RecipientDocument2Issuer = RecipientDocument2Issuer;
            inValue.RecipientDocument2Number = RecipientDocument2Number;
            inValue.RecipientBankName = RecipientBankName;
            inValue.RecipientBankRouting = RecipientBankRouting;
            inValue.RecipientBranchID = RecipientBranchID;
            inValue.RecipientBankAccountNo = RecipientBankAccountNo;
            inValue.RecipientBankAccountID = RecipientBankAccountID;
            inValue.RecipientBankAddress = RecipientBankAddress;
            inValue.RecipientTIN = RecipientTIN;
            inValue.RecipientBankAccoutType = RecipientBankAccoutType;
            inValue.NetAmountSent = NetAmountSent;
            inValue.TotalFeeSender = TotalFeeSender;
            inValue.TotalCollectedFromSender = TotalCollectedFromSender;
            inValue.ExchangeRateSender = ExchangeRateSender;
            inValue.CurrencySent = CurrencySent;
            inValue.ExchangeRateAgent = ExchangeRateAgent;
            inValue.TotalFeeAgent = TotalFeeAgent;
            inValue.TotalDueFromAgent = TotalDueFromAgent;
            inValue.AmountReceived = AmountReceived;
            inValue.TotalRecipiententFee = TotalRecipiententFee;
            inValue.TotalPaidToRecipient = TotalPaidToRecipient;
            inValue.CurrencyOfPayment = CurrencyOfPayment;
            inValue.CurrencyOfPaymentID = CurrencyOfPaymentID;
            inValue.ChallengeQuestion = ChallengeQuestion;
            inValue.ChallengeAnswer = ChallengeAnswer;
            inValue.PayLocationID = PayLocationID;
            inValue.PaymentLocation = PaymentLocation;
            inValue.MessageToRecipient = MessageToRecipient;
            inValue.PaymentInstructions = PaymentInstructions;
            inValue.TypeOfPaymentText = TypeOfPaymentText;
            inValue.TypeOfPaymentID = TypeOfPaymentID;
            inValue.OrderClaimCode = OrderClaimCode;
            inValue.Custom1 = Custom1;
            inValue.Custom2 = Custom2;
            inValue.Custom3 = Custom3;
            inValue.Custom4 = Custom4;
            inValue.SenderOccupation = SenderOccupation;
            inValue.RelationshipToSender = RelationshipToSender;
            inValue.PurposeOfOrder = PurposeOfOrder;
            inValue.OrderFundSource = OrderFundSource;
            inValue.OrderCardSurcharge = OrderCardSurcharge;
            inValue.AdditionalChargesDiscounts = AdditionalChargesDiscounts;
            inValue.ChargesDiscountsDescription = ChargesDiscountsDescription;
            WebRequestGetOrderStatusProfiler.OrderAPI.CreateNewOrderResponse retVal = ((WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap)(this)).CreateNewOrder(inValue);
            return retVal.CreateNewOrderResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.CreateNewOrderResponse> WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap.CreateNewOrderAsync(WebRequestGetOrderStatusProfiler.OrderAPI.CreateNewOrderRequest request) {
            return base.Channel.CreateNewOrderAsync(request);
        }
        
        public System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.CreateNewOrderResponse> CreateNewOrderAsync(
                    WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, 
                    string AgentID, 
                    string PartnerID, 
                    string AgentOrderReference, 
                    string OrderCreationTime, 
                    string SenderUID, 
                    string SenderLastName, 
                    string SenderFirstName, 
                    string SenderCompanyName, 
                    string SenderAddress, 
                    string SenderCity, 
                    string SenderState, 
                    string SenderZip, 
                    string SenderCountry, 
                    string SenderPhone1, 
                    string SenderPhone2, 
                    string SenderEmail, 
                    string SenderDateOfBirth, 
                    string SenderDocument1Type, 
                    string SenderDocument1Issue, 
                    string SenderDocument1Number, 
                    string SenderDocument2Type, 
                    string SenderDocument2Issue, 
                    string SenderDocument2Number, 
                    string SenderGender, 
                    string SenderNationality, 
                    string RecipientUID, 
                    string RecipientLastName, 
                    string RecipientFirstName, 
                    string RecipientCompany, 
                    string RecipientAddress1, 
                    string RecipientCity, 
                    string RecipientState, 
                    string RecipientZip, 
                    string RecipientCountry, 
                    string RecipientPhone1, 
                    string RecipientPhone2, 
                    string RecipientEmail, 
                    string RecipientDocument1Type, 
                    string RecipientDocument1Issuer, 
                    string RecipientDocument1Number, 
                    string RecipientDocument2Type, 
                    string RecipientDocument2Issuer, 
                    string RecipientDocument2Number, 
                    string RecipientBankName, 
                    string RecipientBankRouting, 
                    string RecipientBranchID, 
                    string RecipientBankAccountNo, 
                    string RecipientBankAccountID, 
                    string RecipientBankAddress, 
                    string RecipientTIN, 
                    string RecipientBankAccoutType, 
                    string NetAmountSent, 
                    string TotalFeeSender, 
                    string TotalCollectedFromSender, 
                    string ExchangeRateSender, 
                    string CurrencySent, 
                    string ExchangeRateAgent, 
                    string TotalFeeAgent, 
                    string TotalDueFromAgent, 
                    string AmountReceived, 
                    string TotalRecipiententFee, 
                    string TotalPaidToRecipient, 
                    string CurrencyOfPayment, 
                    string CurrencyOfPaymentID, 
                    string ChallengeQuestion, 
                    string ChallengeAnswer, 
                    string PayLocationID, 
                    string PaymentLocation, 
                    string MessageToRecipient, 
                    string PaymentInstructions, 
                    string TypeOfPaymentText, 
                    string TypeOfPaymentID, 
                    string OrderClaimCode, 
                    string Custom1, 
                    string Custom2, 
                    string Custom3, 
                    string Custom4, 
                    string SenderOccupation, 
                    string RelationshipToSender, 
                    string PurposeOfOrder, 
                    string OrderFundSource, 
                    string OrderCardSurcharge, 
                    string AdditionalChargesDiscounts, 
                    string ChargesDiscountsDescription) {
            WebRequestGetOrderStatusProfiler.OrderAPI.CreateNewOrderRequest inValue = new WebRequestGetOrderStatusProfiler.OrderAPI.CreateNewOrderRequest();
            inValue.AuthHeader = AuthHeader;
            inValue.AgentID = AgentID;
            inValue.PartnerID = PartnerID;
            inValue.AgentOrderReference = AgentOrderReference;
            inValue.OrderCreationTime = OrderCreationTime;
            inValue.SenderUID = SenderUID;
            inValue.SenderLastName = SenderLastName;
            inValue.SenderFirstName = SenderFirstName;
            inValue.SenderCompanyName = SenderCompanyName;
            inValue.SenderAddress = SenderAddress;
            inValue.SenderCity = SenderCity;
            inValue.SenderState = SenderState;
            inValue.SenderZip = SenderZip;
            inValue.SenderCountry = SenderCountry;
            inValue.SenderPhone1 = SenderPhone1;
            inValue.SenderPhone2 = SenderPhone2;
            inValue.SenderEmail = SenderEmail;
            inValue.SenderDateOfBirth = SenderDateOfBirth;
            inValue.SenderDocument1Type = SenderDocument1Type;
            inValue.SenderDocument1Issue = SenderDocument1Issue;
            inValue.SenderDocument1Number = SenderDocument1Number;
            inValue.SenderDocument2Type = SenderDocument2Type;
            inValue.SenderDocument2Issue = SenderDocument2Issue;
            inValue.SenderDocument2Number = SenderDocument2Number;
            inValue.SenderGender = SenderGender;
            inValue.SenderNationality = SenderNationality;
            inValue.RecipientUID = RecipientUID;
            inValue.RecipientLastName = RecipientLastName;
            inValue.RecipientFirstName = RecipientFirstName;
            inValue.RecipientCompany = RecipientCompany;
            inValue.RecipientAddress1 = RecipientAddress1;
            inValue.RecipientCity = RecipientCity;
            inValue.RecipientState = RecipientState;
            inValue.RecipientZip = RecipientZip;
            inValue.RecipientCountry = RecipientCountry;
            inValue.RecipientPhone1 = RecipientPhone1;
            inValue.RecipientPhone2 = RecipientPhone2;
            inValue.RecipientEmail = RecipientEmail;
            inValue.RecipientDocument1Type = RecipientDocument1Type;
            inValue.RecipientDocument1Issuer = RecipientDocument1Issuer;
            inValue.RecipientDocument1Number = RecipientDocument1Number;
            inValue.RecipientDocument2Type = RecipientDocument2Type;
            inValue.RecipientDocument2Issuer = RecipientDocument2Issuer;
            inValue.RecipientDocument2Number = RecipientDocument2Number;
            inValue.RecipientBankName = RecipientBankName;
            inValue.RecipientBankRouting = RecipientBankRouting;
            inValue.RecipientBranchID = RecipientBranchID;
            inValue.RecipientBankAccountNo = RecipientBankAccountNo;
            inValue.RecipientBankAccountID = RecipientBankAccountID;
            inValue.RecipientBankAddress = RecipientBankAddress;
            inValue.RecipientTIN = RecipientTIN;
            inValue.RecipientBankAccoutType = RecipientBankAccoutType;
            inValue.NetAmountSent = NetAmountSent;
            inValue.TotalFeeSender = TotalFeeSender;
            inValue.TotalCollectedFromSender = TotalCollectedFromSender;
            inValue.ExchangeRateSender = ExchangeRateSender;
            inValue.CurrencySent = CurrencySent;
            inValue.ExchangeRateAgent = ExchangeRateAgent;
            inValue.TotalFeeAgent = TotalFeeAgent;
            inValue.TotalDueFromAgent = TotalDueFromAgent;
            inValue.AmountReceived = AmountReceived;
            inValue.TotalRecipiententFee = TotalRecipiententFee;
            inValue.TotalPaidToRecipient = TotalPaidToRecipient;
            inValue.CurrencyOfPayment = CurrencyOfPayment;
            inValue.CurrencyOfPaymentID = CurrencyOfPaymentID;
            inValue.ChallengeQuestion = ChallengeQuestion;
            inValue.ChallengeAnswer = ChallengeAnswer;
            inValue.PayLocationID = PayLocationID;
            inValue.PaymentLocation = PaymentLocation;
            inValue.MessageToRecipient = MessageToRecipient;
            inValue.PaymentInstructions = PaymentInstructions;
            inValue.TypeOfPaymentText = TypeOfPaymentText;
            inValue.TypeOfPaymentID = TypeOfPaymentID;
            inValue.OrderClaimCode = OrderClaimCode;
            inValue.Custom1 = Custom1;
            inValue.Custom2 = Custom2;
            inValue.Custom3 = Custom3;
            inValue.Custom4 = Custom4;
            inValue.SenderOccupation = SenderOccupation;
            inValue.RelationshipToSender = RelationshipToSender;
            inValue.PurposeOfOrder = PurposeOfOrder;
            inValue.OrderFundSource = OrderFundSource;
            inValue.OrderCardSurcharge = OrderCardSurcharge;
            inValue.AdditionalChargesDiscounts = AdditionalChargesDiscounts;
            inValue.ChargesDiscountsDescription = ChargesDiscountsDescription;
            return ((WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap)(this)).CreateNewOrderAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebRequestGetOrderStatusProfiler.OrderAPI.CreateNewPaymentResponse WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap.CreateNewPayment(WebRequestGetOrderStatusProfiler.OrderAPI.CreateNewPaymentRequest request) {
            return base.Channel.CreateNewPayment(request);
        }
        
        public System.Xml.XmlNode CreateNewPayment(
                    WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, 
                    string AgentID, 
                    string PartnerID, 
                    string AgentOrderReference, 
                    string OrderCreationTime, 
                    string SenderUID, 
                    string SenderLastName, 
                    string SenderFirstName, 
                    string SenderCompanyName, 
                    string SenderAddress, 
                    string SenderCity, 
                    string SenderState, 
                    string SenderZip, 
                    string SenderCountry, 
                    string SenderPhone1, 
                    string SenderPhone2, 
                    string SenderEmail, 
                    string SenderDateOfBirth, 
                    string SenderDocument1Type, 
                    string SenderDocument1Issue, 
                    string SenderDocument1Number, 
                    string SenderDocument2Type, 
                    string SenderDocument2Issue, 
                    string SenderDocument2Number, 
                    string SenderGender, 
                    string SenderNationality, 
                    string RecipientUID, 
                    string RecipientLastName, 
                    string RecipientFirstName, 
                    string RecipientCompany, 
                    string RecipientAddress1, 
                    string RecipientCity, 
                    string RecipientState, 
                    string RecipientZip, 
                    string RecipientCountry, 
                    string RecipientPhone1, 
                    string RecipientPhone2, 
                    string RecipientEmail, 
                    string RecipientDocument1Type, 
                    string RecipientDocument1Issuer, 
                    string RecipientDocument1Number, 
                    string RecipientDocument2Type, 
                    string RecipientDocument2Issuer, 
                    string RecipientDocument2Number, 
                    string RecipientBillType, 
                    string RecipientBillerName, 
                    string RecipientBillerCode, 
                    string RecipientBillerAccountNo, 
                    string RecipientBillerUserName, 
                    string RecipientBillerPassword, 
                    string RecipientBillerAccountID, 
                    string RecipientTIN, 
                    string NetAmountSent, 
                    string TotalFeeSender, 
                    string TotalCollectedFromSender, 
                    string ExchangeRateSender, 
                    string CurrencySent, 
                    string ExchangeRateAgent, 
                    string TotalFeeAgent, 
                    string TotalDueFromAgent, 
                    string AmountReceived, 
                    string TotalRecipiententFee, 
                    string TotalPaidToRecipient, 
                    string CurrencyOfPayment, 
                    string CurrencyOfPaymentID, 
                    string ChallengeQuestion, 
                    string ChallengeAnswer, 
                    string PayLocationID, 
                    string PaymentLocation, 
                    string MessageToRecipient, 
                    string PaymentInstructions, 
                    string TypeOfPaymentText, 
                    string TypeOfPaymentID, 
                    string OrderClaimCode, 
                    string Custom1, 
                    string Custom2, 
                    string Custom3, 
                    string Custom4, 
                    string SenderOccupation, 
                    string RelationshipToSender, 
                    string PurposeOfOrder, 
                    string OrderFundSource, 
                    string OrderCardSurcharge) {
            WebRequestGetOrderStatusProfiler.OrderAPI.CreateNewPaymentRequest inValue = new WebRequestGetOrderStatusProfiler.OrderAPI.CreateNewPaymentRequest();
            inValue.AuthHeader = AuthHeader;
            inValue.AgentID = AgentID;
            inValue.PartnerID = PartnerID;
            inValue.AgentOrderReference = AgentOrderReference;
            inValue.OrderCreationTime = OrderCreationTime;
            inValue.SenderUID = SenderUID;
            inValue.SenderLastName = SenderLastName;
            inValue.SenderFirstName = SenderFirstName;
            inValue.SenderCompanyName = SenderCompanyName;
            inValue.SenderAddress = SenderAddress;
            inValue.SenderCity = SenderCity;
            inValue.SenderState = SenderState;
            inValue.SenderZip = SenderZip;
            inValue.SenderCountry = SenderCountry;
            inValue.SenderPhone1 = SenderPhone1;
            inValue.SenderPhone2 = SenderPhone2;
            inValue.SenderEmail = SenderEmail;
            inValue.SenderDateOfBirth = SenderDateOfBirth;
            inValue.SenderDocument1Type = SenderDocument1Type;
            inValue.SenderDocument1Issue = SenderDocument1Issue;
            inValue.SenderDocument1Number = SenderDocument1Number;
            inValue.SenderDocument2Type = SenderDocument2Type;
            inValue.SenderDocument2Issue = SenderDocument2Issue;
            inValue.SenderDocument2Number = SenderDocument2Number;
            inValue.SenderGender = SenderGender;
            inValue.SenderNationality = SenderNationality;
            inValue.RecipientUID = RecipientUID;
            inValue.RecipientLastName = RecipientLastName;
            inValue.RecipientFirstName = RecipientFirstName;
            inValue.RecipientCompany = RecipientCompany;
            inValue.RecipientAddress1 = RecipientAddress1;
            inValue.RecipientCity = RecipientCity;
            inValue.RecipientState = RecipientState;
            inValue.RecipientZip = RecipientZip;
            inValue.RecipientCountry = RecipientCountry;
            inValue.RecipientPhone1 = RecipientPhone1;
            inValue.RecipientPhone2 = RecipientPhone2;
            inValue.RecipientEmail = RecipientEmail;
            inValue.RecipientDocument1Type = RecipientDocument1Type;
            inValue.RecipientDocument1Issuer = RecipientDocument1Issuer;
            inValue.RecipientDocument1Number = RecipientDocument1Number;
            inValue.RecipientDocument2Type = RecipientDocument2Type;
            inValue.RecipientDocument2Issuer = RecipientDocument2Issuer;
            inValue.RecipientDocument2Number = RecipientDocument2Number;
            inValue.RecipientBillType = RecipientBillType;
            inValue.RecipientBillerName = RecipientBillerName;
            inValue.RecipientBillerCode = RecipientBillerCode;
            inValue.RecipientBillerAccountNo = RecipientBillerAccountNo;
            inValue.RecipientBillerUserName = RecipientBillerUserName;
            inValue.RecipientBillerPassword = RecipientBillerPassword;
            inValue.RecipientBillerAccountID = RecipientBillerAccountID;
            inValue.RecipientTIN = RecipientTIN;
            inValue.NetAmountSent = NetAmountSent;
            inValue.TotalFeeSender = TotalFeeSender;
            inValue.TotalCollectedFromSender = TotalCollectedFromSender;
            inValue.ExchangeRateSender = ExchangeRateSender;
            inValue.CurrencySent = CurrencySent;
            inValue.ExchangeRateAgent = ExchangeRateAgent;
            inValue.TotalFeeAgent = TotalFeeAgent;
            inValue.TotalDueFromAgent = TotalDueFromAgent;
            inValue.AmountReceived = AmountReceived;
            inValue.TotalRecipiententFee = TotalRecipiententFee;
            inValue.TotalPaidToRecipient = TotalPaidToRecipient;
            inValue.CurrencyOfPayment = CurrencyOfPayment;
            inValue.CurrencyOfPaymentID = CurrencyOfPaymentID;
            inValue.ChallengeQuestion = ChallengeQuestion;
            inValue.ChallengeAnswer = ChallengeAnswer;
            inValue.PayLocationID = PayLocationID;
            inValue.PaymentLocation = PaymentLocation;
            inValue.MessageToRecipient = MessageToRecipient;
            inValue.PaymentInstructions = PaymentInstructions;
            inValue.TypeOfPaymentText = TypeOfPaymentText;
            inValue.TypeOfPaymentID = TypeOfPaymentID;
            inValue.OrderClaimCode = OrderClaimCode;
            inValue.Custom1 = Custom1;
            inValue.Custom2 = Custom2;
            inValue.Custom3 = Custom3;
            inValue.Custom4 = Custom4;
            inValue.SenderOccupation = SenderOccupation;
            inValue.RelationshipToSender = RelationshipToSender;
            inValue.PurposeOfOrder = PurposeOfOrder;
            inValue.OrderFundSource = OrderFundSource;
            inValue.OrderCardSurcharge = OrderCardSurcharge;
            WebRequestGetOrderStatusProfiler.OrderAPI.CreateNewPaymentResponse retVal = ((WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap)(this)).CreateNewPayment(inValue);
            return retVal.CreateNewPaymentResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.CreateNewPaymentResponse> WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap.CreateNewPaymentAsync(WebRequestGetOrderStatusProfiler.OrderAPI.CreateNewPaymentRequest request) {
            return base.Channel.CreateNewPaymentAsync(request);
        }
        
        public System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.CreateNewPaymentResponse> CreateNewPaymentAsync(
                    WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, 
                    string AgentID, 
                    string PartnerID, 
                    string AgentOrderReference, 
                    string OrderCreationTime, 
                    string SenderUID, 
                    string SenderLastName, 
                    string SenderFirstName, 
                    string SenderCompanyName, 
                    string SenderAddress, 
                    string SenderCity, 
                    string SenderState, 
                    string SenderZip, 
                    string SenderCountry, 
                    string SenderPhone1, 
                    string SenderPhone2, 
                    string SenderEmail, 
                    string SenderDateOfBirth, 
                    string SenderDocument1Type, 
                    string SenderDocument1Issue, 
                    string SenderDocument1Number, 
                    string SenderDocument2Type, 
                    string SenderDocument2Issue, 
                    string SenderDocument2Number, 
                    string SenderGender, 
                    string SenderNationality, 
                    string RecipientUID, 
                    string RecipientLastName, 
                    string RecipientFirstName, 
                    string RecipientCompany, 
                    string RecipientAddress1, 
                    string RecipientCity, 
                    string RecipientState, 
                    string RecipientZip, 
                    string RecipientCountry, 
                    string RecipientPhone1, 
                    string RecipientPhone2, 
                    string RecipientEmail, 
                    string RecipientDocument1Type, 
                    string RecipientDocument1Issuer, 
                    string RecipientDocument1Number, 
                    string RecipientDocument2Type, 
                    string RecipientDocument2Issuer, 
                    string RecipientDocument2Number, 
                    string RecipientBillType, 
                    string RecipientBillerName, 
                    string RecipientBillerCode, 
                    string RecipientBillerAccountNo, 
                    string RecipientBillerUserName, 
                    string RecipientBillerPassword, 
                    string RecipientBillerAccountID, 
                    string RecipientTIN, 
                    string NetAmountSent, 
                    string TotalFeeSender, 
                    string TotalCollectedFromSender, 
                    string ExchangeRateSender, 
                    string CurrencySent, 
                    string ExchangeRateAgent, 
                    string TotalFeeAgent, 
                    string TotalDueFromAgent, 
                    string AmountReceived, 
                    string TotalRecipiententFee, 
                    string TotalPaidToRecipient, 
                    string CurrencyOfPayment, 
                    string CurrencyOfPaymentID, 
                    string ChallengeQuestion, 
                    string ChallengeAnswer, 
                    string PayLocationID, 
                    string PaymentLocation, 
                    string MessageToRecipient, 
                    string PaymentInstructions, 
                    string TypeOfPaymentText, 
                    string TypeOfPaymentID, 
                    string OrderClaimCode, 
                    string Custom1, 
                    string Custom2, 
                    string Custom3, 
                    string Custom4, 
                    string SenderOccupation, 
                    string RelationshipToSender, 
                    string PurposeOfOrder, 
                    string OrderFundSource, 
                    string OrderCardSurcharge) {
            WebRequestGetOrderStatusProfiler.OrderAPI.CreateNewPaymentRequest inValue = new WebRequestGetOrderStatusProfiler.OrderAPI.CreateNewPaymentRequest();
            inValue.AuthHeader = AuthHeader;
            inValue.AgentID = AgentID;
            inValue.PartnerID = PartnerID;
            inValue.AgentOrderReference = AgentOrderReference;
            inValue.OrderCreationTime = OrderCreationTime;
            inValue.SenderUID = SenderUID;
            inValue.SenderLastName = SenderLastName;
            inValue.SenderFirstName = SenderFirstName;
            inValue.SenderCompanyName = SenderCompanyName;
            inValue.SenderAddress = SenderAddress;
            inValue.SenderCity = SenderCity;
            inValue.SenderState = SenderState;
            inValue.SenderZip = SenderZip;
            inValue.SenderCountry = SenderCountry;
            inValue.SenderPhone1 = SenderPhone1;
            inValue.SenderPhone2 = SenderPhone2;
            inValue.SenderEmail = SenderEmail;
            inValue.SenderDateOfBirth = SenderDateOfBirth;
            inValue.SenderDocument1Type = SenderDocument1Type;
            inValue.SenderDocument1Issue = SenderDocument1Issue;
            inValue.SenderDocument1Number = SenderDocument1Number;
            inValue.SenderDocument2Type = SenderDocument2Type;
            inValue.SenderDocument2Issue = SenderDocument2Issue;
            inValue.SenderDocument2Number = SenderDocument2Number;
            inValue.SenderGender = SenderGender;
            inValue.SenderNationality = SenderNationality;
            inValue.RecipientUID = RecipientUID;
            inValue.RecipientLastName = RecipientLastName;
            inValue.RecipientFirstName = RecipientFirstName;
            inValue.RecipientCompany = RecipientCompany;
            inValue.RecipientAddress1 = RecipientAddress1;
            inValue.RecipientCity = RecipientCity;
            inValue.RecipientState = RecipientState;
            inValue.RecipientZip = RecipientZip;
            inValue.RecipientCountry = RecipientCountry;
            inValue.RecipientPhone1 = RecipientPhone1;
            inValue.RecipientPhone2 = RecipientPhone2;
            inValue.RecipientEmail = RecipientEmail;
            inValue.RecipientDocument1Type = RecipientDocument1Type;
            inValue.RecipientDocument1Issuer = RecipientDocument1Issuer;
            inValue.RecipientDocument1Number = RecipientDocument1Number;
            inValue.RecipientDocument2Type = RecipientDocument2Type;
            inValue.RecipientDocument2Issuer = RecipientDocument2Issuer;
            inValue.RecipientDocument2Number = RecipientDocument2Number;
            inValue.RecipientBillType = RecipientBillType;
            inValue.RecipientBillerName = RecipientBillerName;
            inValue.RecipientBillerCode = RecipientBillerCode;
            inValue.RecipientBillerAccountNo = RecipientBillerAccountNo;
            inValue.RecipientBillerUserName = RecipientBillerUserName;
            inValue.RecipientBillerPassword = RecipientBillerPassword;
            inValue.RecipientBillerAccountID = RecipientBillerAccountID;
            inValue.RecipientTIN = RecipientTIN;
            inValue.NetAmountSent = NetAmountSent;
            inValue.TotalFeeSender = TotalFeeSender;
            inValue.TotalCollectedFromSender = TotalCollectedFromSender;
            inValue.ExchangeRateSender = ExchangeRateSender;
            inValue.CurrencySent = CurrencySent;
            inValue.ExchangeRateAgent = ExchangeRateAgent;
            inValue.TotalFeeAgent = TotalFeeAgent;
            inValue.TotalDueFromAgent = TotalDueFromAgent;
            inValue.AmountReceived = AmountReceived;
            inValue.TotalRecipiententFee = TotalRecipiententFee;
            inValue.TotalPaidToRecipient = TotalPaidToRecipient;
            inValue.CurrencyOfPayment = CurrencyOfPayment;
            inValue.CurrencyOfPaymentID = CurrencyOfPaymentID;
            inValue.ChallengeQuestion = ChallengeQuestion;
            inValue.ChallengeAnswer = ChallengeAnswer;
            inValue.PayLocationID = PayLocationID;
            inValue.PaymentLocation = PaymentLocation;
            inValue.MessageToRecipient = MessageToRecipient;
            inValue.PaymentInstructions = PaymentInstructions;
            inValue.TypeOfPaymentText = TypeOfPaymentText;
            inValue.TypeOfPaymentID = TypeOfPaymentID;
            inValue.OrderClaimCode = OrderClaimCode;
            inValue.Custom1 = Custom1;
            inValue.Custom2 = Custom2;
            inValue.Custom3 = Custom3;
            inValue.Custom4 = Custom4;
            inValue.SenderOccupation = SenderOccupation;
            inValue.RelationshipToSender = RelationshipToSender;
            inValue.PurposeOfOrder = PurposeOfOrder;
            inValue.OrderFundSource = OrderFundSource;
            inValue.OrderCardSurcharge = OrderCardSurcharge;
            return ((WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap)(this)).CreateNewPaymentAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebRequestGetOrderStatusProfiler.OrderAPI.GetRatesAndCostsResponse WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap.GetRatesAndCosts(WebRequestGetOrderStatusProfiler.OrderAPI.GetRatesAndCostsRequest request) {
            return base.Channel.GetRatesAndCosts(request);
        }
        
        public System.Xml.XmlNode GetRatesAndCosts(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, string AgentID, string PartnerID, string SenderCountry, string RecipientCountry, string NetAmountSent, string CurrencySent, string AmountReceived, string CurrencyOfPayment, string CurrencyOfPaymentID, string PayLocationID, string PaymentLocation, string TypeOfPaymentText, string TypeOfPaymentID) {
            WebRequestGetOrderStatusProfiler.OrderAPI.GetRatesAndCostsRequest inValue = new WebRequestGetOrderStatusProfiler.OrderAPI.GetRatesAndCostsRequest();
            inValue.AuthHeader = AuthHeader;
            inValue.AgentID = AgentID;
            inValue.PartnerID = PartnerID;
            inValue.SenderCountry = SenderCountry;
            inValue.RecipientCountry = RecipientCountry;
            inValue.NetAmountSent = NetAmountSent;
            inValue.CurrencySent = CurrencySent;
            inValue.AmountReceived = AmountReceived;
            inValue.CurrencyOfPayment = CurrencyOfPayment;
            inValue.CurrencyOfPaymentID = CurrencyOfPaymentID;
            inValue.PayLocationID = PayLocationID;
            inValue.PaymentLocation = PaymentLocation;
            inValue.TypeOfPaymentText = TypeOfPaymentText;
            inValue.TypeOfPaymentID = TypeOfPaymentID;
            WebRequestGetOrderStatusProfiler.OrderAPI.GetRatesAndCostsResponse retVal = ((WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap)(this)).GetRatesAndCosts(inValue);
            return retVal.GetRatesAndCostsResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetRatesAndCostsResponse> WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap.GetRatesAndCostsAsync(WebRequestGetOrderStatusProfiler.OrderAPI.GetRatesAndCostsRequest request) {
            return base.Channel.GetRatesAndCostsAsync(request);
        }
        
        public System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetRatesAndCostsResponse> GetRatesAndCostsAsync(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, string AgentID, string PartnerID, string SenderCountry, string RecipientCountry, string NetAmountSent, string CurrencySent, string AmountReceived, string CurrencyOfPayment, string CurrencyOfPaymentID, string PayLocationID, string PaymentLocation, string TypeOfPaymentText, string TypeOfPaymentID) {
            WebRequestGetOrderStatusProfiler.OrderAPI.GetRatesAndCostsRequest inValue = new WebRequestGetOrderStatusProfiler.OrderAPI.GetRatesAndCostsRequest();
            inValue.AuthHeader = AuthHeader;
            inValue.AgentID = AgentID;
            inValue.PartnerID = PartnerID;
            inValue.SenderCountry = SenderCountry;
            inValue.RecipientCountry = RecipientCountry;
            inValue.NetAmountSent = NetAmountSent;
            inValue.CurrencySent = CurrencySent;
            inValue.AmountReceived = AmountReceived;
            inValue.CurrencyOfPayment = CurrencyOfPayment;
            inValue.CurrencyOfPaymentID = CurrencyOfPaymentID;
            inValue.PayLocationID = PayLocationID;
            inValue.PaymentLocation = PaymentLocation;
            inValue.TypeOfPaymentText = TypeOfPaymentText;
            inValue.TypeOfPaymentID = TypeOfPaymentID;
            return ((WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap)(this)).GetRatesAndCostsAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebRequestGetOrderStatusProfiler.OrderAPI.GetPaymentLocationsResponse WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap.GetPaymentLocations(WebRequestGetOrderStatusProfiler.OrderAPI.GetPaymentLocationsRequest request) {
            return base.Channel.GetPaymentLocations(request);
        }
        
        public System.Xml.XmlNode GetPaymentLocations(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, string AgentID, string PartnerID, string CurrencyOfPaymentID, string TypeOfPaymentID) {
            WebRequestGetOrderStatusProfiler.OrderAPI.GetPaymentLocationsRequest inValue = new WebRequestGetOrderStatusProfiler.OrderAPI.GetPaymentLocationsRequest();
            inValue.AuthHeader = AuthHeader;
            inValue.AgentID = AgentID;
            inValue.PartnerID = PartnerID;
            inValue.CurrencyOfPaymentID = CurrencyOfPaymentID;
            inValue.TypeOfPaymentID = TypeOfPaymentID;
            WebRequestGetOrderStatusProfiler.OrderAPI.GetPaymentLocationsResponse retVal = ((WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap)(this)).GetPaymentLocations(inValue);
            return retVal.GetPaymentLocationsResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetPaymentLocationsResponse> WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap.GetPaymentLocationsAsync(WebRequestGetOrderStatusProfiler.OrderAPI.GetPaymentLocationsRequest request) {
            return base.Channel.GetPaymentLocationsAsync(request);
        }
        
        public System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetPaymentLocationsResponse> GetPaymentLocationsAsync(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, string AgentID, string PartnerID, string CurrencyOfPaymentID, string TypeOfPaymentID) {
            WebRequestGetOrderStatusProfiler.OrderAPI.GetPaymentLocationsRequest inValue = new WebRequestGetOrderStatusProfiler.OrderAPI.GetPaymentLocationsRequest();
            inValue.AuthHeader = AuthHeader;
            inValue.AgentID = AgentID;
            inValue.PartnerID = PartnerID;
            inValue.CurrencyOfPaymentID = CurrencyOfPaymentID;
            inValue.TypeOfPaymentID = TypeOfPaymentID;
            return ((WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap)(this)).GetPaymentLocationsAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebRequestGetOrderStatusProfiler.OrderAPI.GetOrderDetailsResponse WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap.GetOrderDetails(WebRequestGetOrderStatusProfiler.OrderAPI.GetOrderDetailsRequest request) {
            return base.Channel.GetOrderDetails(request);
        }
        
        public System.Xml.XmlNode GetOrderDetails(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, string AgentID, string PartnerID, string AgentOrderReference, string OrderId) {
            WebRequestGetOrderStatusProfiler.OrderAPI.GetOrderDetailsRequest inValue = new WebRequestGetOrderStatusProfiler.OrderAPI.GetOrderDetailsRequest();
            inValue.AuthHeader = AuthHeader;
            inValue.AgentID = AgentID;
            inValue.PartnerID = PartnerID;
            inValue.AgentOrderReference = AgentOrderReference;
            inValue.OrderId = OrderId;
            WebRequestGetOrderStatusProfiler.OrderAPI.GetOrderDetailsResponse retVal = ((WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap)(this)).GetOrderDetails(inValue);
            return retVal.GetOrderDetailsResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetOrderDetailsResponse> WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap.GetOrderDetailsAsync(WebRequestGetOrderStatusProfiler.OrderAPI.GetOrderDetailsRequest request) {
            return base.Channel.GetOrderDetailsAsync(request);
        }
        
        public System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetOrderDetailsResponse> GetOrderDetailsAsync(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, string AgentID, string PartnerID, string AgentOrderReference, string OrderId) {
            WebRequestGetOrderStatusProfiler.OrderAPI.GetOrderDetailsRequest inValue = new WebRequestGetOrderStatusProfiler.OrderAPI.GetOrderDetailsRequest();
            inValue.AuthHeader = AuthHeader;
            inValue.AgentID = AgentID;
            inValue.PartnerID = PartnerID;
            inValue.AgentOrderReference = AgentOrderReference;
            inValue.OrderId = OrderId;
            return ((WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap)(this)).GetOrderDetailsAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebRequestGetOrderStatusProfiler.OrderAPI.GetCancelationByCancelDateResponse WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap.GetCancelationByCancelDate(WebRequestGetOrderStatusProfiler.OrderAPI.GetCancelationByCancelDateRequest request) {
            return base.Channel.GetCancelationByCancelDate(request);
        }
        
        public System.Xml.XmlNode GetCancelationByCancelDate(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, string AgentID, string PartnerID, string CanceledDate) {
            WebRequestGetOrderStatusProfiler.OrderAPI.GetCancelationByCancelDateRequest inValue = new WebRequestGetOrderStatusProfiler.OrderAPI.GetCancelationByCancelDateRequest();
            inValue.AuthHeader = AuthHeader;
            inValue.AgentID = AgentID;
            inValue.PartnerID = PartnerID;
            inValue.CanceledDate = CanceledDate;
            WebRequestGetOrderStatusProfiler.OrderAPI.GetCancelationByCancelDateResponse retVal = ((WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap)(this)).GetCancelationByCancelDate(inValue);
            return retVal.GetCancelationByCancelDateResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetCancelationByCancelDateResponse> WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap.GetCancelationByCancelDateAsync(WebRequestGetOrderStatusProfiler.OrderAPI.GetCancelationByCancelDateRequest request) {
            return base.Channel.GetCancelationByCancelDateAsync(request);
        }
        
        public System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetCancelationByCancelDateResponse> GetCancelationByCancelDateAsync(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, string AgentID, string PartnerID, string CanceledDate) {
            WebRequestGetOrderStatusProfiler.OrderAPI.GetCancelationByCancelDateRequest inValue = new WebRequestGetOrderStatusProfiler.OrderAPI.GetCancelationByCancelDateRequest();
            inValue.AuthHeader = AuthHeader;
            inValue.AgentID = AgentID;
            inValue.PartnerID = PartnerID;
            inValue.CanceledDate = CanceledDate;
            return ((WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap)(this)).GetCancelationByCancelDateAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebRequestGetOrderStatusProfiler.OrderAPI.GetClientAccountChangesByDateResponse WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap.GetClientAccountChangesByDate(WebRequestGetOrderStatusProfiler.OrderAPI.GetClientAccountChangesByDateRequest request) {
            return base.Channel.GetClientAccountChangesByDate(request);
        }
        
        public System.Xml.XmlNode GetClientAccountChangesByDate(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, string AgentID, string PartnerID, string InitialDate, string EndDate) {
            WebRequestGetOrderStatusProfiler.OrderAPI.GetClientAccountChangesByDateRequest inValue = new WebRequestGetOrderStatusProfiler.OrderAPI.GetClientAccountChangesByDateRequest();
            inValue.AuthHeader = AuthHeader;
            inValue.AgentID = AgentID;
            inValue.PartnerID = PartnerID;
            inValue.InitialDate = InitialDate;
            inValue.EndDate = EndDate;
            WebRequestGetOrderStatusProfiler.OrderAPI.GetClientAccountChangesByDateResponse retVal = ((WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap)(this)).GetClientAccountChangesByDate(inValue);
            return retVal.GetClientAccountChangesByDateResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetClientAccountChangesByDateResponse> WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap.GetClientAccountChangesByDateAsync(WebRequestGetOrderStatusProfiler.OrderAPI.GetClientAccountChangesByDateRequest request) {
            return base.Channel.GetClientAccountChangesByDateAsync(request);
        }
        
        public System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetClientAccountChangesByDateResponse> GetClientAccountChangesByDateAsync(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, string AgentID, string PartnerID, string InitialDate, string EndDate) {
            WebRequestGetOrderStatusProfiler.OrderAPI.GetClientAccountChangesByDateRequest inValue = new WebRequestGetOrderStatusProfiler.OrderAPI.GetClientAccountChangesByDateRequest();
            inValue.AuthHeader = AuthHeader;
            inValue.AgentID = AgentID;
            inValue.PartnerID = PartnerID;
            inValue.InitialDate = InitialDate;
            inValue.EndDate = EndDate;
            return ((WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap)(this)).GetClientAccountChangesByDateAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebRequestGetOrderStatusProfiler.OrderAPI.GetCurrencyTypesOfPaymentResponse WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap.GetCurrencyTypesOfPayment(WebRequestGetOrderStatusProfiler.OrderAPI.GetCurrencyTypesOfPaymentRequest request) {
            return base.Channel.GetCurrencyTypesOfPayment(request);
        }
        
        public System.Xml.XmlNode GetCurrencyTypesOfPayment(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, string AgentID, string PartnerID, string SenderCountry, string RecipientCountry) {
            WebRequestGetOrderStatusProfiler.OrderAPI.GetCurrencyTypesOfPaymentRequest inValue = new WebRequestGetOrderStatusProfiler.OrderAPI.GetCurrencyTypesOfPaymentRequest();
            inValue.AuthHeader = AuthHeader;
            inValue.AgentID = AgentID;
            inValue.PartnerID = PartnerID;
            inValue.SenderCountry = SenderCountry;
            inValue.RecipientCountry = RecipientCountry;
            WebRequestGetOrderStatusProfiler.OrderAPI.GetCurrencyTypesOfPaymentResponse retVal = ((WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap)(this)).GetCurrencyTypesOfPayment(inValue);
            return retVal.GetCurrencyTypesOfPaymentResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetCurrencyTypesOfPaymentResponse> WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap.GetCurrencyTypesOfPaymentAsync(WebRequestGetOrderStatusProfiler.OrderAPI.GetCurrencyTypesOfPaymentRequest request) {
            return base.Channel.GetCurrencyTypesOfPaymentAsync(request);
        }
        
        public System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetCurrencyTypesOfPaymentResponse> GetCurrencyTypesOfPaymentAsync(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, string AgentID, string PartnerID, string SenderCountry, string RecipientCountry) {
            WebRequestGetOrderStatusProfiler.OrderAPI.GetCurrencyTypesOfPaymentRequest inValue = new WebRequestGetOrderStatusProfiler.OrderAPI.GetCurrencyTypesOfPaymentRequest();
            inValue.AuthHeader = AuthHeader;
            inValue.AgentID = AgentID;
            inValue.PartnerID = PartnerID;
            inValue.SenderCountry = SenderCountry;
            inValue.RecipientCountry = RecipientCountry;
            return ((WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap)(this)).GetCurrencyTypesOfPaymentAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebRequestGetOrderStatusProfiler.OrderAPI.UpdateOrderResponse WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap.UpdateOrder(WebRequestGetOrderStatusProfiler.OrderAPI.UpdateOrderRequest request) {
            return base.Channel.UpdateOrder(request);
        }
        
        public System.Xml.XmlNode UpdateOrder(
                    WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, 
                    string AgentID, 
                    string PartnerID, 
                    string AgentOrderReference, 
                    string OrderCreationTime, 
                    string SenderUID, 
                    string SenderLastName, 
                    string SenderFirstName, 
                    string SenderCompanyName, 
                    string SenderAddress, 
                    string SenderCity, 
                    string SenderState, 
                    string SenderZip, 
                    string SenderCountry, 
                    string SenderPhone1, 
                    string SenderPhone2, 
                    string SenderEmail, 
                    string SenderDateOfBirth, 
                    string SenderDocument1Type, 
                    string SenderDocument1Issue, 
                    string SenderDocument1Number, 
                    string SenderDocument2Type, 
                    string SenderDocument2Issue, 
                    string SenderDocument2Number, 
                    string RecipientUID, 
                    string RecipientLastName, 
                    string RecipientFirstName, 
                    string RecipientCompany, 
                    string RecipientAddress1, 
                    string RecipientCity, 
                    string RecipientState, 
                    string RecipientZip, 
                    string RecipientCountry, 
                    string RecipientPhone1, 
                    string RecipientPhone2, 
                    string RecipientEmail, 
                    string RecipientDocument1Type, 
                    string RecipientDocument1Issuer, 
                    string RecipientDocument1Number, 
                    string RecipientDocument2Type, 
                    string RecipientDocument2Issuer, 
                    string RecipientDocument2Number, 
                    string RecipientBankName, 
                    string RecipientBankRouting, 
                    string RecipientBranchID, 
                    string RecipientBankAccountNo, 
                    string RecipientBankAccountID, 
                    string RecipientTIN, 
                    string RecipientBankAccoutType, 
                    string NetAmountSent, 
                    string TotalFeeSender, 
                    string TotalCollectedFromSender, 
                    string ExchangeRateSender, 
                    string CurrencySent, 
                    string ExchangeRateAgent, 
                    string TotalFeeAgent, 
                    string TotalDueFromAgent, 
                    string AmountReceived, 
                    string TotalRecipiententFee, 
                    string TotalPaidToRecipient, 
                    string CurrencyOfPayment, 
                    string CurrencyOfPaymentID, 
                    string ChallengeQuestion, 
                    string ChallengeAnswer, 
                    string PayLocationID, 
                    string PaymentLocation, 
                    string MessageToRecipient, 
                    string PaymentInstructions, 
                    string TypeOfPaymentText, 
                    string TypeOfPaymentID, 
                    string OrderClaimCode, 
                    string Custom1, 
                    string Custom2, 
                    string Custom3, 
                    string Custom4) {
            WebRequestGetOrderStatusProfiler.OrderAPI.UpdateOrderRequest inValue = new WebRequestGetOrderStatusProfiler.OrderAPI.UpdateOrderRequest();
            inValue.AuthHeader = AuthHeader;
            inValue.AgentID = AgentID;
            inValue.PartnerID = PartnerID;
            inValue.AgentOrderReference = AgentOrderReference;
            inValue.OrderCreationTime = OrderCreationTime;
            inValue.SenderUID = SenderUID;
            inValue.SenderLastName = SenderLastName;
            inValue.SenderFirstName = SenderFirstName;
            inValue.SenderCompanyName = SenderCompanyName;
            inValue.SenderAddress = SenderAddress;
            inValue.SenderCity = SenderCity;
            inValue.SenderState = SenderState;
            inValue.SenderZip = SenderZip;
            inValue.SenderCountry = SenderCountry;
            inValue.SenderPhone1 = SenderPhone1;
            inValue.SenderPhone2 = SenderPhone2;
            inValue.SenderEmail = SenderEmail;
            inValue.SenderDateOfBirth = SenderDateOfBirth;
            inValue.SenderDocument1Type = SenderDocument1Type;
            inValue.SenderDocument1Issue = SenderDocument1Issue;
            inValue.SenderDocument1Number = SenderDocument1Number;
            inValue.SenderDocument2Type = SenderDocument2Type;
            inValue.SenderDocument2Issue = SenderDocument2Issue;
            inValue.SenderDocument2Number = SenderDocument2Number;
            inValue.RecipientUID = RecipientUID;
            inValue.RecipientLastName = RecipientLastName;
            inValue.RecipientFirstName = RecipientFirstName;
            inValue.RecipientCompany = RecipientCompany;
            inValue.RecipientAddress1 = RecipientAddress1;
            inValue.RecipientCity = RecipientCity;
            inValue.RecipientState = RecipientState;
            inValue.RecipientZip = RecipientZip;
            inValue.RecipientCountry = RecipientCountry;
            inValue.RecipientPhone1 = RecipientPhone1;
            inValue.RecipientPhone2 = RecipientPhone2;
            inValue.RecipientEmail = RecipientEmail;
            inValue.RecipientDocument1Type = RecipientDocument1Type;
            inValue.RecipientDocument1Issuer = RecipientDocument1Issuer;
            inValue.RecipientDocument1Number = RecipientDocument1Number;
            inValue.RecipientDocument2Type = RecipientDocument2Type;
            inValue.RecipientDocument2Issuer = RecipientDocument2Issuer;
            inValue.RecipientDocument2Number = RecipientDocument2Number;
            inValue.RecipientBankName = RecipientBankName;
            inValue.RecipientBankRouting = RecipientBankRouting;
            inValue.RecipientBranchID = RecipientBranchID;
            inValue.RecipientBankAccountNo = RecipientBankAccountNo;
            inValue.RecipientBankAccountID = RecipientBankAccountID;
            inValue.RecipientTIN = RecipientTIN;
            inValue.RecipientBankAccoutType = RecipientBankAccoutType;
            inValue.NetAmountSent = NetAmountSent;
            inValue.TotalFeeSender = TotalFeeSender;
            inValue.TotalCollectedFromSender = TotalCollectedFromSender;
            inValue.ExchangeRateSender = ExchangeRateSender;
            inValue.CurrencySent = CurrencySent;
            inValue.ExchangeRateAgent = ExchangeRateAgent;
            inValue.TotalFeeAgent = TotalFeeAgent;
            inValue.TotalDueFromAgent = TotalDueFromAgent;
            inValue.AmountReceived = AmountReceived;
            inValue.TotalRecipiententFee = TotalRecipiententFee;
            inValue.TotalPaidToRecipient = TotalPaidToRecipient;
            inValue.CurrencyOfPayment = CurrencyOfPayment;
            inValue.CurrencyOfPaymentID = CurrencyOfPaymentID;
            inValue.ChallengeQuestion = ChallengeQuestion;
            inValue.ChallengeAnswer = ChallengeAnswer;
            inValue.PayLocationID = PayLocationID;
            inValue.PaymentLocation = PaymentLocation;
            inValue.MessageToRecipient = MessageToRecipient;
            inValue.PaymentInstructions = PaymentInstructions;
            inValue.TypeOfPaymentText = TypeOfPaymentText;
            inValue.TypeOfPaymentID = TypeOfPaymentID;
            inValue.OrderClaimCode = OrderClaimCode;
            inValue.Custom1 = Custom1;
            inValue.Custom2 = Custom2;
            inValue.Custom3 = Custom3;
            inValue.Custom4 = Custom4;
            WebRequestGetOrderStatusProfiler.OrderAPI.UpdateOrderResponse retVal = ((WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap)(this)).UpdateOrder(inValue);
            return retVal.UpdateOrderResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.UpdateOrderResponse> WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap.UpdateOrderAsync(WebRequestGetOrderStatusProfiler.OrderAPI.UpdateOrderRequest request) {
            return base.Channel.UpdateOrderAsync(request);
        }
        
        public System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.UpdateOrderResponse> UpdateOrderAsync(
                    WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, 
                    string AgentID, 
                    string PartnerID, 
                    string AgentOrderReference, 
                    string OrderCreationTime, 
                    string SenderUID, 
                    string SenderLastName, 
                    string SenderFirstName, 
                    string SenderCompanyName, 
                    string SenderAddress, 
                    string SenderCity, 
                    string SenderState, 
                    string SenderZip, 
                    string SenderCountry, 
                    string SenderPhone1, 
                    string SenderPhone2, 
                    string SenderEmail, 
                    string SenderDateOfBirth, 
                    string SenderDocument1Type, 
                    string SenderDocument1Issue, 
                    string SenderDocument1Number, 
                    string SenderDocument2Type, 
                    string SenderDocument2Issue, 
                    string SenderDocument2Number, 
                    string RecipientUID, 
                    string RecipientLastName, 
                    string RecipientFirstName, 
                    string RecipientCompany, 
                    string RecipientAddress1, 
                    string RecipientCity, 
                    string RecipientState, 
                    string RecipientZip, 
                    string RecipientCountry, 
                    string RecipientPhone1, 
                    string RecipientPhone2, 
                    string RecipientEmail, 
                    string RecipientDocument1Type, 
                    string RecipientDocument1Issuer, 
                    string RecipientDocument1Number, 
                    string RecipientDocument2Type, 
                    string RecipientDocument2Issuer, 
                    string RecipientDocument2Number, 
                    string RecipientBankName, 
                    string RecipientBankRouting, 
                    string RecipientBranchID, 
                    string RecipientBankAccountNo, 
                    string RecipientBankAccountID, 
                    string RecipientTIN, 
                    string RecipientBankAccoutType, 
                    string NetAmountSent, 
                    string TotalFeeSender, 
                    string TotalCollectedFromSender, 
                    string ExchangeRateSender, 
                    string CurrencySent, 
                    string ExchangeRateAgent, 
                    string TotalFeeAgent, 
                    string TotalDueFromAgent, 
                    string AmountReceived, 
                    string TotalRecipiententFee, 
                    string TotalPaidToRecipient, 
                    string CurrencyOfPayment, 
                    string CurrencyOfPaymentID, 
                    string ChallengeQuestion, 
                    string ChallengeAnswer, 
                    string PayLocationID, 
                    string PaymentLocation, 
                    string MessageToRecipient, 
                    string PaymentInstructions, 
                    string TypeOfPaymentText, 
                    string TypeOfPaymentID, 
                    string OrderClaimCode, 
                    string Custom1, 
                    string Custom2, 
                    string Custom3, 
                    string Custom4) {
            WebRequestGetOrderStatusProfiler.OrderAPI.UpdateOrderRequest inValue = new WebRequestGetOrderStatusProfiler.OrderAPI.UpdateOrderRequest();
            inValue.AuthHeader = AuthHeader;
            inValue.AgentID = AgentID;
            inValue.PartnerID = PartnerID;
            inValue.AgentOrderReference = AgentOrderReference;
            inValue.OrderCreationTime = OrderCreationTime;
            inValue.SenderUID = SenderUID;
            inValue.SenderLastName = SenderLastName;
            inValue.SenderFirstName = SenderFirstName;
            inValue.SenderCompanyName = SenderCompanyName;
            inValue.SenderAddress = SenderAddress;
            inValue.SenderCity = SenderCity;
            inValue.SenderState = SenderState;
            inValue.SenderZip = SenderZip;
            inValue.SenderCountry = SenderCountry;
            inValue.SenderPhone1 = SenderPhone1;
            inValue.SenderPhone2 = SenderPhone2;
            inValue.SenderEmail = SenderEmail;
            inValue.SenderDateOfBirth = SenderDateOfBirth;
            inValue.SenderDocument1Type = SenderDocument1Type;
            inValue.SenderDocument1Issue = SenderDocument1Issue;
            inValue.SenderDocument1Number = SenderDocument1Number;
            inValue.SenderDocument2Type = SenderDocument2Type;
            inValue.SenderDocument2Issue = SenderDocument2Issue;
            inValue.SenderDocument2Number = SenderDocument2Number;
            inValue.RecipientUID = RecipientUID;
            inValue.RecipientLastName = RecipientLastName;
            inValue.RecipientFirstName = RecipientFirstName;
            inValue.RecipientCompany = RecipientCompany;
            inValue.RecipientAddress1 = RecipientAddress1;
            inValue.RecipientCity = RecipientCity;
            inValue.RecipientState = RecipientState;
            inValue.RecipientZip = RecipientZip;
            inValue.RecipientCountry = RecipientCountry;
            inValue.RecipientPhone1 = RecipientPhone1;
            inValue.RecipientPhone2 = RecipientPhone2;
            inValue.RecipientEmail = RecipientEmail;
            inValue.RecipientDocument1Type = RecipientDocument1Type;
            inValue.RecipientDocument1Issuer = RecipientDocument1Issuer;
            inValue.RecipientDocument1Number = RecipientDocument1Number;
            inValue.RecipientDocument2Type = RecipientDocument2Type;
            inValue.RecipientDocument2Issuer = RecipientDocument2Issuer;
            inValue.RecipientDocument2Number = RecipientDocument2Number;
            inValue.RecipientBankName = RecipientBankName;
            inValue.RecipientBankRouting = RecipientBankRouting;
            inValue.RecipientBranchID = RecipientBranchID;
            inValue.RecipientBankAccountNo = RecipientBankAccountNo;
            inValue.RecipientBankAccountID = RecipientBankAccountID;
            inValue.RecipientTIN = RecipientTIN;
            inValue.RecipientBankAccoutType = RecipientBankAccoutType;
            inValue.NetAmountSent = NetAmountSent;
            inValue.TotalFeeSender = TotalFeeSender;
            inValue.TotalCollectedFromSender = TotalCollectedFromSender;
            inValue.ExchangeRateSender = ExchangeRateSender;
            inValue.CurrencySent = CurrencySent;
            inValue.ExchangeRateAgent = ExchangeRateAgent;
            inValue.TotalFeeAgent = TotalFeeAgent;
            inValue.TotalDueFromAgent = TotalDueFromAgent;
            inValue.AmountReceived = AmountReceived;
            inValue.TotalRecipiententFee = TotalRecipiententFee;
            inValue.TotalPaidToRecipient = TotalPaidToRecipient;
            inValue.CurrencyOfPayment = CurrencyOfPayment;
            inValue.CurrencyOfPaymentID = CurrencyOfPaymentID;
            inValue.ChallengeQuestion = ChallengeQuestion;
            inValue.ChallengeAnswer = ChallengeAnswer;
            inValue.PayLocationID = PayLocationID;
            inValue.PaymentLocation = PaymentLocation;
            inValue.MessageToRecipient = MessageToRecipient;
            inValue.PaymentInstructions = PaymentInstructions;
            inValue.TypeOfPaymentText = TypeOfPaymentText;
            inValue.TypeOfPaymentID = TypeOfPaymentID;
            inValue.OrderClaimCode = OrderClaimCode;
            inValue.Custom1 = Custom1;
            inValue.Custom2 = Custom2;
            inValue.Custom3 = Custom3;
            inValue.Custom4 = Custom4;
            return ((WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap)(this)).UpdateOrderAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebRequestGetOrderStatusProfiler.OrderAPI.GetCurrenciesOfPaymentResponse WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap.GetCurrenciesOfPayment(WebRequestGetOrderStatusProfiler.OrderAPI.GetCurrenciesOfPaymentRequest request) {
            return base.Channel.GetCurrenciesOfPayment(request);
        }
        
        public System.Xml.XmlNode GetCurrenciesOfPayment(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, string AgentID, string PartnerID, string SenderCountry, string RecipientCountry) {
            WebRequestGetOrderStatusProfiler.OrderAPI.GetCurrenciesOfPaymentRequest inValue = new WebRequestGetOrderStatusProfiler.OrderAPI.GetCurrenciesOfPaymentRequest();
            inValue.AuthHeader = AuthHeader;
            inValue.AgentID = AgentID;
            inValue.PartnerID = PartnerID;
            inValue.SenderCountry = SenderCountry;
            inValue.RecipientCountry = RecipientCountry;
            WebRequestGetOrderStatusProfiler.OrderAPI.GetCurrenciesOfPaymentResponse retVal = ((WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap)(this)).GetCurrenciesOfPayment(inValue);
            return retVal.GetCurrenciesOfPaymentResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetCurrenciesOfPaymentResponse> WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap.GetCurrenciesOfPaymentAsync(WebRequestGetOrderStatusProfiler.OrderAPI.GetCurrenciesOfPaymentRequest request) {
            return base.Channel.GetCurrenciesOfPaymentAsync(request);
        }
        
        public System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetCurrenciesOfPaymentResponse> GetCurrenciesOfPaymentAsync(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, string AgentID, string PartnerID, string SenderCountry, string RecipientCountry) {
            WebRequestGetOrderStatusProfiler.OrderAPI.GetCurrenciesOfPaymentRequest inValue = new WebRequestGetOrderStatusProfiler.OrderAPI.GetCurrenciesOfPaymentRequest();
            inValue.AuthHeader = AuthHeader;
            inValue.AgentID = AgentID;
            inValue.PartnerID = PartnerID;
            inValue.SenderCountry = SenderCountry;
            inValue.RecipientCountry = RecipientCountry;
            return ((WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap)(this)).GetCurrenciesOfPaymentAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebRequestGetOrderStatusProfiler.OrderAPI.ValidateBillPaymentResponse WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap.ValidateBillPayment(WebRequestGetOrderStatusProfiler.OrderAPI.ValidateBillPaymentRequest request) {
            return base.Channel.ValidateBillPayment(request);
        }
        
        public System.Xml.XmlNode ValidateBillPayment(
                    WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, 
                    string AgentID, 
                    string PartnerID, 
                    string SenderCountry, 
                    string RecipientLastName, 
                    string RecipientFirstName, 
                    string RecipientCompany, 
                    string RecipientCountry, 
                    string RecipientBillType, 
                    string RecipientBillerName, 
                    string RecipientBillerCode, 
                    string RecipientBillerAccountNo, 
                    string RecipientBillerUserName, 
                    string RecipientBillerPassword, 
                    string RecipientTIN, 
                    string NetAmountSent, 
                    string BillDueDate, 
                    string ExchangeRateSender, 
                    string CurrencySent, 
                    string TotalPaidToBiller, 
                    string CurrencyOfPayment, 
                    string TypeOfPaymentID) {
            WebRequestGetOrderStatusProfiler.OrderAPI.ValidateBillPaymentRequest inValue = new WebRequestGetOrderStatusProfiler.OrderAPI.ValidateBillPaymentRequest();
            inValue.AuthHeader = AuthHeader;
            inValue.AgentID = AgentID;
            inValue.PartnerID = PartnerID;
            inValue.SenderCountry = SenderCountry;
            inValue.RecipientLastName = RecipientLastName;
            inValue.RecipientFirstName = RecipientFirstName;
            inValue.RecipientCompany = RecipientCompany;
            inValue.RecipientCountry = RecipientCountry;
            inValue.RecipientBillType = RecipientBillType;
            inValue.RecipientBillerName = RecipientBillerName;
            inValue.RecipientBillerCode = RecipientBillerCode;
            inValue.RecipientBillerAccountNo = RecipientBillerAccountNo;
            inValue.RecipientBillerUserName = RecipientBillerUserName;
            inValue.RecipientBillerPassword = RecipientBillerPassword;
            inValue.RecipientTIN = RecipientTIN;
            inValue.NetAmountSent = NetAmountSent;
            inValue.BillDueDate = BillDueDate;
            inValue.ExchangeRateSender = ExchangeRateSender;
            inValue.CurrencySent = CurrencySent;
            inValue.TotalPaidToBiller = TotalPaidToBiller;
            inValue.CurrencyOfPayment = CurrencyOfPayment;
            inValue.TypeOfPaymentID = TypeOfPaymentID;
            WebRequestGetOrderStatusProfiler.OrderAPI.ValidateBillPaymentResponse retVal = ((WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap)(this)).ValidateBillPayment(inValue);
            return retVal.ValidateBillPaymentResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.ValidateBillPaymentResponse> WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap.ValidateBillPaymentAsync(WebRequestGetOrderStatusProfiler.OrderAPI.ValidateBillPaymentRequest request) {
            return base.Channel.ValidateBillPaymentAsync(request);
        }
        
        public System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.ValidateBillPaymentResponse> ValidateBillPaymentAsync(
                    WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, 
                    string AgentID, 
                    string PartnerID, 
                    string SenderCountry, 
                    string RecipientLastName, 
                    string RecipientFirstName, 
                    string RecipientCompany, 
                    string RecipientCountry, 
                    string RecipientBillType, 
                    string RecipientBillerName, 
                    string RecipientBillerCode, 
                    string RecipientBillerAccountNo, 
                    string RecipientBillerUserName, 
                    string RecipientBillerPassword, 
                    string RecipientTIN, 
                    string NetAmountSent, 
                    string BillDueDate, 
                    string ExchangeRateSender, 
                    string CurrencySent, 
                    string TotalPaidToBiller, 
                    string CurrencyOfPayment, 
                    string TypeOfPaymentID) {
            WebRequestGetOrderStatusProfiler.OrderAPI.ValidateBillPaymentRequest inValue = new WebRequestGetOrderStatusProfiler.OrderAPI.ValidateBillPaymentRequest();
            inValue.AuthHeader = AuthHeader;
            inValue.AgentID = AgentID;
            inValue.PartnerID = PartnerID;
            inValue.SenderCountry = SenderCountry;
            inValue.RecipientLastName = RecipientLastName;
            inValue.RecipientFirstName = RecipientFirstName;
            inValue.RecipientCompany = RecipientCompany;
            inValue.RecipientCountry = RecipientCountry;
            inValue.RecipientBillType = RecipientBillType;
            inValue.RecipientBillerName = RecipientBillerName;
            inValue.RecipientBillerCode = RecipientBillerCode;
            inValue.RecipientBillerAccountNo = RecipientBillerAccountNo;
            inValue.RecipientBillerUserName = RecipientBillerUserName;
            inValue.RecipientBillerPassword = RecipientBillerPassword;
            inValue.RecipientTIN = RecipientTIN;
            inValue.NetAmountSent = NetAmountSent;
            inValue.BillDueDate = BillDueDate;
            inValue.ExchangeRateSender = ExchangeRateSender;
            inValue.CurrencySent = CurrencySent;
            inValue.TotalPaidToBiller = TotalPaidToBiller;
            inValue.CurrencyOfPayment = CurrencyOfPayment;
            inValue.TypeOfPaymentID = TypeOfPaymentID;
            return ((WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap)(this)).ValidateBillPaymentAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebRequestGetOrderStatusProfiler.OrderAPI.GetOrderStatusResponse WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap.GetOrderStatus(WebRequestGetOrderStatusProfiler.OrderAPI.GetOrderStatusRequest request) {
            return base.Channel.GetOrderStatus(request);
        }
        
        public System.Xml.XmlNode GetOrderStatus(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, string AgentID, string PartnerID, string AgentOrderReference, string OrderID) {
            WebRequestGetOrderStatusProfiler.OrderAPI.GetOrderStatusRequest inValue = new WebRequestGetOrderStatusProfiler.OrderAPI.GetOrderStatusRequest();
            inValue.AuthHeader = AuthHeader;
            inValue.AgentID = AgentID;
            inValue.PartnerID = PartnerID;
            inValue.AgentOrderReference = AgentOrderReference;
            inValue.OrderID = OrderID;
            WebRequestGetOrderStatusProfiler.OrderAPI.GetOrderStatusResponse retVal = ((WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap)(this)).GetOrderStatus(inValue);
            return retVal.GetOrderStatusResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetOrderStatusResponse> WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap.GetOrderStatusAsync(WebRequestGetOrderStatusProfiler.OrderAPI.GetOrderStatusRequest request) {
            return base.Channel.GetOrderStatusAsync(request);
        }
        
        public System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetOrderStatusResponse> GetOrderStatusAsync(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, string AgentID, string PartnerID, string AgentOrderReference, string OrderID) {
            WebRequestGetOrderStatusProfiler.OrderAPI.GetOrderStatusRequest inValue = new WebRequestGetOrderStatusProfiler.OrderAPI.GetOrderStatusRequest();
            inValue.AuthHeader = AuthHeader;
            inValue.AgentID = AgentID;
            inValue.PartnerID = PartnerID;
            inValue.AgentOrderReference = AgentOrderReference;
            inValue.OrderID = OrderID;
            return ((WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap)(this)).GetOrderStatusAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebRequestGetOrderStatusProfiler.OrderAPI.GetPdfPaymentReceiptResponse WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap.GetPdfPaymentReceipt(WebRequestGetOrderStatusProfiler.OrderAPI.GetPdfPaymentReceiptRequest request) {
            return base.Channel.GetPdfPaymentReceipt(request);
        }
        
        public System.Xml.XmlNode GetPdfPaymentReceipt(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, string OrderID) {
            WebRequestGetOrderStatusProfiler.OrderAPI.GetPdfPaymentReceiptRequest inValue = new WebRequestGetOrderStatusProfiler.OrderAPI.GetPdfPaymentReceiptRequest();
            inValue.AuthHeader = AuthHeader;
            inValue.OrderID = OrderID;
            WebRequestGetOrderStatusProfiler.OrderAPI.GetPdfPaymentReceiptResponse retVal = ((WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap)(this)).GetPdfPaymentReceipt(inValue);
            return retVal.GetPdfPaymentReceiptResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetPdfPaymentReceiptResponse> WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap.GetPdfPaymentReceiptAsync(WebRequestGetOrderStatusProfiler.OrderAPI.GetPdfPaymentReceiptRequest request) {
            return base.Channel.GetPdfPaymentReceiptAsync(request);
        }
        
        public System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetPdfPaymentReceiptResponse> GetPdfPaymentReceiptAsync(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, string OrderID) {
            WebRequestGetOrderStatusProfiler.OrderAPI.GetPdfPaymentReceiptRequest inValue = new WebRequestGetOrderStatusProfiler.OrderAPI.GetPdfPaymentReceiptRequest();
            inValue.AuthHeader = AuthHeader;
            inValue.OrderID = OrderID;
            return ((WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap)(this)).GetPdfPaymentReceiptAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebRequestGetOrderStatusProfiler.OrderAPI.GetActiveCountriesResponse WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap.GetActiveCountries(WebRequestGetOrderStatusProfiler.OrderAPI.GetActiveCountriesRequest request) {
            return base.Channel.GetActiveCountries(request);
        }
        
        public System.Xml.XmlNode GetActiveCountries(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, string AgentID, string PartnerID, string SenderCountry) {
            WebRequestGetOrderStatusProfiler.OrderAPI.GetActiveCountriesRequest inValue = new WebRequestGetOrderStatusProfiler.OrderAPI.GetActiveCountriesRequest();
            inValue.AuthHeader = AuthHeader;
            inValue.AgentID = AgentID;
            inValue.PartnerID = PartnerID;
            inValue.SenderCountry = SenderCountry;
            WebRequestGetOrderStatusProfiler.OrderAPI.GetActiveCountriesResponse retVal = ((WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap)(this)).GetActiveCountries(inValue);
            return retVal.GetActiveCountriesResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetActiveCountriesResponse> WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap.GetActiveCountriesAsync(WebRequestGetOrderStatusProfiler.OrderAPI.GetActiveCountriesRequest request) {
            return base.Channel.GetActiveCountriesAsync(request);
        }
        
        public System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetActiveCountriesResponse> GetActiveCountriesAsync(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, string AgentID, string PartnerID, string SenderCountry) {
            WebRequestGetOrderStatusProfiler.OrderAPI.GetActiveCountriesRequest inValue = new WebRequestGetOrderStatusProfiler.OrderAPI.GetActiveCountriesRequest();
            inValue.AuthHeader = AuthHeader;
            inValue.AgentID = AgentID;
            inValue.PartnerID = PartnerID;
            inValue.SenderCountry = SenderCountry;
            return ((WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap)(this)).GetActiveCountriesAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebRequestGetOrderStatusProfiler.OrderAPI.GetPartnerBalanceResponse WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap.GetPartnerBalance(WebRequestGetOrderStatusProfiler.OrderAPI.GetPartnerBalanceRequest request) {
            return base.Channel.GetPartnerBalance(request);
        }
        
        public System.Xml.XmlNode GetPartnerBalance(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, string AgentID, string PartnerID) {
            WebRequestGetOrderStatusProfiler.OrderAPI.GetPartnerBalanceRequest inValue = new WebRequestGetOrderStatusProfiler.OrderAPI.GetPartnerBalanceRequest();
            inValue.AuthHeader = AuthHeader;
            inValue.AgentID = AgentID;
            inValue.PartnerID = PartnerID;
            WebRequestGetOrderStatusProfiler.OrderAPI.GetPartnerBalanceResponse retVal = ((WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap)(this)).GetPartnerBalance(inValue);
            return retVal.GetPartnerBalanceResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetPartnerBalanceResponse> WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap.GetPartnerBalanceAsync(WebRequestGetOrderStatusProfiler.OrderAPI.GetPartnerBalanceRequest request) {
            return base.Channel.GetPartnerBalanceAsync(request);
        }
        
        public System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetPartnerBalanceResponse> GetPartnerBalanceAsync(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, string AgentID, string PartnerID) {
            WebRequestGetOrderStatusProfiler.OrderAPI.GetPartnerBalanceRequest inValue = new WebRequestGetOrderStatusProfiler.OrderAPI.GetPartnerBalanceRequest();
            inValue.AuthHeader = AuthHeader;
            inValue.AgentID = AgentID;
            inValue.PartnerID = PartnerID;
            return ((WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap)(this)).GetPartnerBalanceAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebRequestGetOrderStatusProfiler.OrderAPI.GetPaymentsByDateResponse WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap.GetPaymentsByDate(WebRequestGetOrderStatusProfiler.OrderAPI.GetPaymentsByDateRequest request) {
            return base.Channel.GetPaymentsByDate(request);
        }
        
        public System.Xml.XmlNode GetPaymentsByDate(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, string AgentID, string PartnerID, string PaymentConfirmationDate) {
            WebRequestGetOrderStatusProfiler.OrderAPI.GetPaymentsByDateRequest inValue = new WebRequestGetOrderStatusProfiler.OrderAPI.GetPaymentsByDateRequest();
            inValue.AuthHeader = AuthHeader;
            inValue.AgentID = AgentID;
            inValue.PartnerID = PartnerID;
            inValue.PaymentConfirmationDate = PaymentConfirmationDate;
            WebRequestGetOrderStatusProfiler.OrderAPI.GetPaymentsByDateResponse retVal = ((WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap)(this)).GetPaymentsByDate(inValue);
            return retVal.GetPaymentsByDateResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetPaymentsByDateResponse> WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap.GetPaymentsByDateAsync(WebRequestGetOrderStatusProfiler.OrderAPI.GetPaymentsByDateRequest request) {
            return base.Channel.GetPaymentsByDateAsync(request);
        }
        
        public System.Threading.Tasks.Task<WebRequestGetOrderStatusProfiler.OrderAPI.GetPaymentsByDateResponse> GetPaymentsByDateAsync(WebRequestGetOrderStatusProfiler.OrderAPI.AuthHeader AuthHeader, string AgentID, string PartnerID, string PaymentConfirmationDate) {
            WebRequestGetOrderStatusProfiler.OrderAPI.GetPaymentsByDateRequest inValue = new WebRequestGetOrderStatusProfiler.OrderAPI.GetPaymentsByDateRequest();
            inValue.AuthHeader = AuthHeader;
            inValue.AgentID = AgentID;
            inValue.PartnerID = PartnerID;
            inValue.PaymentConfirmationDate = PaymentConfirmationDate;
            return ((WebRequestGetOrderStatusProfiler.OrderAPI.mtsSoap)(this)).GetPaymentsByDateAsync(inValue);
        }
    }
}
